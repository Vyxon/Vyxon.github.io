import { Browser } from '../helper/browser';
const PRE_AUTH_CHARGE_LINK = '/v1/charges/3ds';
export class ApiCharge {
    constructor(api) {
        this.api = api;
    }
    /**
     * Current method allows to work with charge related endpoints
     *
     * @example
     * api.charge().preAuth('payload', cb);
     *
     * @param {object} payload - Payload for pre authorization.
     * @param {number} payload.amount - Charge amount.
     * @param {string} payload.currency - Charge currency.
     * @param {string} payload.token - Payment source token.
     * @param {string} [payload._3ds.redirect_url] - Redirect url after 3d secure processing.
     * @param {listener} [cb]
     */
    preAuth(payload, cb) {
        if (typeof cb === 'function')
            return this.api
                .getClient('POST', PRE_AUTH_CHARGE_LINK)
                .send(Object.assign(Object.assign({}, payload), { _3ds: Object.assign(Object.assign({}, payload._3ds), { browser_details: {
                        name: Browser.getBrowserName(),
                        java_enabled: Browser.isJavaEnabled().toString(),
                        language: Browser.getLanguage(),
                        screen_height: Browser.getScreenHeight().toString(),
                        screen_width: Browser.getScreenWidth().toString(),
                        time_zone: Browser.getTimezoneOffset().toString(),
                        color_depth: Browser.getColorDepth().toString(),
                    } }) }), (data) => {
                cb(data);
            });
        return this.api
            .getClientPromise('POST', PRE_AUTH_CHARGE_LINK)
            .send(Object.assign(Object.assign({}, payload), { _3ds: Object.assign(Object.assign({}, payload._3ds), { browser_details: {
                    name: Browser.getBrowserName(),
                    java_enabled: Browser.isJavaEnabled().toString(),
                    language: Browser.getLanguage(),
                    screen_height: Browser.getScreenHeight().toString(),
                    screen_width: Browser.getScreenWidth().toString(),
                    time_zone: Browser.getTimezoneOffset().toString(),
                    color_depth: Browser.getColorDepth().toString(),
                } }) }));
    }
}
//# sourceMappingURL=../../src/lib/api/api-charge.js.map