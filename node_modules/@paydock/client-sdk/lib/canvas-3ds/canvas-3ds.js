import { Link, SECURE_3D } from '../components/link';
import { Container } from '../components/container';
import { IFrame } from '../components/iframe';
import { IFrameEvent } from '../components/iframe-event';
import { Standalone3dsService } from '../canvas-3ds/services/index';
import { EventEmitter } from "../helper/event-emitter";
/**
 * List of available token's content formats
 * @enum TOKEN_FORMAT
 *
 * @type {object}
 * @param {string} HTML=html
 */
var TOKEN_FORMAT;
(function (TOKEN_FORMAT) {
    TOKEN_FORMAT["HTML"] = "html";
    TOKEN_FORMAT["URL"] = "url";
    TOKEN_FORMAT["STANDALONE_3DS"] = "standalone_3ds";
})(TOKEN_FORMAT || (TOKEN_FORMAT = {}));
/**
 * List of available event's name
 * @const EVENT
 *
 * @type {object}
 * @param {string} CHARGE_AUTH_SUCCESS=chargeAuthSuccess
 * @param {string} CHARGE_AUTH_REJECT=chargeAuthReject
 * @param {string} ADDITIONAL_DATA_SUCCESS=additionalDataCollectSuccess
 * @param {string} ADDITIONAL_DATA_REJECT=additionalDataCollectReject
 * @param {string} CHARGE_AUTH=chargeAuth
 */
/**
 * List of available event's name for Standalone 3ds flow
 * @const STANDALONE_3DS_EVENT
 *
 * @type {object}
 * @param {string} CHARGE_AUTH_SUCCESS=chargeAuthSuccess
 * @param {string} CHARGE_AUTH_REJECT=chargeAuthReject
 * @param {string} CHARGE_AUTH_DECOUPLED=chargeAuthDecoupled
 * @param {string} CHARGE_AUTH_CHALLENGE=chargeAuthChallenge
 * @param {string} ERROR=error
*/
/**
 * Class Canvas3ds include method for working on html
 * @constructor
 *
 * @param {string} selector - Selector of html element. Container for widget
 * @param {string} token - Pre authorized token
 * @example
 * var widget = new Canvas3ds('#widget', 'token');
 *
 *
 **/
export class Canvas3ds {
    constructor(selector, token) {
        this.configs = [];
        this.link = new Link(SECURE_3D);
        this.token = Canvas3ds.extractToken(token);
        this.link.setParams({ ref_id: this.token.charge_3ds_id });
        this.container = new Container(selector);
        this.iFrame = new IFrame(this.container);
        this.eventEmitter = new EventEmitter();
        this.standalone3dsService = new Standalone3dsService(this.container, this.eventEmitter);
        this.event = new IFrameEvent(window);
    }
    static extractToken(token) {
        return JSON.parse(window.atob(token));
    }
    /**
     * The final method to beginning, the load process of widget to html
     *
     */
    load() {
        if (this.token.format === TOKEN_FORMAT.HTML)
            this.iFrame.loadFromHtml(this.token.content, { title: '3d secure authentication' });
        else if (this.token.format === TOKEN_FORMAT.URL)
            this.iFrame.load(this.token.content, { title: '3d secure authentication' });
        else if (this.token.format === TOKEN_FORMAT.STANDALONE_3DS)
            this.standalone3dsService.load(this.token.content, { title: '3d secure authentication' });
        else
            console.error('Token contain unsupported payload');
    }
    /**
     * Current method can change environment. By default environment = sandbox.
     * Also we can change domain alias for this environment. By default domain_alias = paydock.com
     *
     * @example
     * widget.setEnv('production');
     * @param {string} env - sandbox, production
     * @param {string} [alias] - Own domain alias
     */
    setEnv(env, alias) {
        this.link.setEnv(env, alias);
        this.standalone3dsService.setEnv(env, alias);
        for (let index in this.configs) {
            if (!this.configs.hasOwnProperty(index))
                continue;
            this.configs[index].setEnv(env, alias);
        }
    }
    getEnv() {
        return this.link.getEnv();
    }
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('chargeAuthReject', function (data) {
     *      console.log(data);
     * });
     * // or
     * widget.on('chargeAuthReject').then(function (data) {
     *      console.log(data);
     * });
     * @param {string} eventName - Available event names [EVENT]{@link EVENT} [STANDALONE_3DS_EVENT]{@link STANDALONE_3DS_EVENT}
     * @param {listener} [cb]
     * @return {Promise<IEventData> | void}
     */
    on(eventName, cb) {
        if (this.token.format === TOKEN_FORMAT.STANDALONE_3DS) {
            if (typeof cb === 'function')
                return this.eventEmitter.subscribe(eventName, cb);
            return new Promise((resolve) => this.eventEmitter.subscribe(eventName, (res) => resolve(res)));
        }
        else {
            if (typeof cb === 'function')
                return this.event.on(eventName, this.link.getParams().ref_id, cb);
            return new Promise((resolve) => this.event.on(eventName, this.link.getParams().ref_id, (res) => resolve(res)));
        }
    }
    /**
     * Using this method you can hide widget after load
     * @param {boolean} [saveSize=false] - using this param you can save iframe's size
     */
    hide(saveSize) {
        this.iFrame.hide(saveSize);
    }
    /**
     * Using this method you can show widget after using hide method
     *
     */
    show() {
        this.iFrame.show();
    }
    /**
     * Using this method you can reload widget
     *
     */
    reload() {
        this.iFrame.remove();
        this.load();
    }
}
//# sourceMappingURL=../../src/lib/canvas-3ds/canvas-3ds.js.map