import { Container } from "../../components/container";
import { IFrame } from "../../components/iframe";
import { EVENT, IFrameEvent } from "../../components/iframe-event";
const hiddenStyle = {
    visibility: "hidden",
    border: "0",
    width: "0",
    height: "0",
};
export var PROCESS_STANDALONE_3DS_STATUS;
(function (PROCESS_STANDALONE_3DS_STATUS) {
    PROCESS_STANDALONE_3DS_STATUS["SUCCESS"] = "success";
    PROCESS_STANDALONE_3DS_STATUS["ERROR"] = "error";
    PROCESS_STANDALONE_3DS_STATUS["PENDING"] = "pending";
})(PROCESS_STANDALONE_3DS_STATUS || (PROCESS_STANDALONE_3DS_STATUS = {}));
export const GPAYMENTS_EVENT = {
    AUTH_SUCCESS: 'chargeAuthSuccess',
    AUTH_ERROR: 'chargeAuthReject',
    DECOUPLED: 'chargeAuthDecoupled',
    CHALLENGE: 'chargeAuthChallenge',
    ERROR: 'error',
};
const AUTH_STATUS = {
    REJECTED: 'rejected',
};
export class GPaymentsService {
    constructor(container, api, eventEmitter) {
        this.container = container;
        this.api = api;
        this.eventEmitter = eventEmitter;
        this.resultRead = false;
        this.iFrameEvent = new IFrameEvent(window);
    }
    load({ initialization_url, secondary_url, charge_3ds_id }, title) {
        try {
            this.setupIFrameEvents(charge_3ds_id);
            this.initializeIFrames(initialization_url, secondary_url, title);
        }
        catch (err) {
            this.eventEmitter.emit(GPAYMENTS_EVENT.ERROR, this.parseError(err, charge_3ds_id));
        }
    }
    initializeIFrames(initializationUrl, secondaryUrl, title, hideAuthorization = true) {
        let divAuthorization = document.createElement("div");
        divAuthorization.setAttribute("id", "paydock_authorization_iframe");
        this.container.getElement().appendChild(divAuthorization);
        this.browserAndChallengeContainer = new Container("#paydock_authorization_iframe");
        this.iFrameAuthorization = new IFrame(this.browserAndChallengeContainer);
        this.iFrameAuthorization.load(initializationUrl, { title });
        let divSecondaryURL = document.createElement("div");
        divSecondaryURL.setAttribute("id", "paydock_secondary_iframe");
        this.container.getElement().appendChild(divSecondaryURL);
        this.monitoringContainer = new Container("#paydock_secondary_iframe");
        this.iFrameSecondaryUrl = new IFrame(this.monitoringContainer);
        this.iFrameSecondaryUrl.load(secondaryUrl, { title });
        this.hideIframes(hideAuthorization);
    }
    hideIframes(hideAuthorization = true) {
        for (const prop in hiddenStyle) {
            if (!hiddenStyle.hasOwnProperty(prop))
                continue;
            if (hideAuthorization)
                this.iFrameAuthorization.setStyle(prop, hiddenStyle[prop]);
            this.iFrameSecondaryUrl.setStyle(prop, hiddenStyle[prop]);
        }
    }
    setupIFrameEvents(widgetId) {
        this.iFrameEvent.on(EVENT.CHARGE_AUTH, widgetId, (data) => {
            if (data.status === "MethodSkipped" /* SKIPPED */)
                this.performAuthentication(data);
        });
        this.iFrameEvent.on(EVENT.CHARGE_AUTH_SUCCESS, widgetId, (data) => {
            this.processResult(data.charge_3ds_id);
        });
    }
    parseResultData({ status }, charge3dsId) {
        return {
            status,
            charge_3ds_id: charge3dsId,
        };
    }
    parseHandleResponse({ status, result }, charge3dsId) {
        return {
            status,
            charge_3ds_id: charge3dsId,
            result: {
                description: result === null || result === void 0 ? void 0 : result.description,
            },
        };
    }
    parseError(data, charge3dsId) {
        return { charge_3ds_id: charge3dsId, error: data };
    }
    processResult(charge3dsId) {
        if (this.resultRead)
            return;
        this.resultRead = true;
        this.api.charge().standalone3dsHandle().then((result) => {
            this.iFrameAuthorization.remove();
            this.iFrameSecondaryUrl.remove();
            if (result.status === PROCESS_STANDALONE_3DS_STATUS.SUCCESS)
                this.eventEmitter.emit(GPAYMENTS_EVENT.AUTH_SUCCESS, this.parseResultData(result, charge3dsId));
            else
                this.eventEmitter.emit(GPAYMENTS_EVENT.AUTH_ERROR, this.parseResultData(result, charge3dsId));
        }, (err) => {
            this.eventEmitter.emit(GPAYMENTS_EVENT.ERROR, this.parseError(err, charge3dsId));
        });
    }
    externalAPI(method, url) {
        let request = new XMLHttpRequest();
        request.open(method, url, true);
        return new Promise((resolve, reject) => {
            request.onload = () => {
                try {
                    const body = JSON.parse(request.responseText);
                    resolve(body);
                }
                catch (error) {
                    reject(error);
                }
            };
            request.send();
        });
    }
    doPolling(url, charge3dsId) {
        this.externalAPI("GET", url).then((data) => {
            if (!data.event || data.event === "AuthResultNotReady")
                setTimeout(() => {
                    this.doPolling(url, charge3dsId);
                }, 2000);
            else if (data.event === 'AuthResultReady')
                this.processResult(charge3dsId);
            else
                throw new Error("Event not supported");
        }).catch((err) => this.eventEmitter.emit(GPAYMENTS_EVENT.ERROR, this.parseError(err, charge3dsId)));
    }
    performAuthentication({ charge_3ds_id }) {
        this.iFrameAuthorization.remove();
        this.iFrameSecondaryUrl.remove();
        this.api.charge().standalone3dsProcess({ charge_3ds_id }).then((authenticationResult) => {
            var _a, _b;
            if (authenticationResult.status === "success" /* SUCCESS */)
                this.eventEmitter.emit(GPAYMENTS_EVENT.AUTH_SUCCESS, this.parseHandleResponse(authenticationResult, charge_3ds_id));
            else if (authenticationResult.status === "pending" /* PENDING */) {
                if ((_a = authenticationResult === null || authenticationResult === void 0 ? void 0 : authenticationResult.result) === null || _a === void 0 ? void 0 : _a.challenge) {
                    this.eventEmitter.emit(GPAYMENTS_EVENT.CHALLENGE, this.parseHandleResponse(authenticationResult, charge_3ds_id));
                    this.initializeIFrames(authenticationResult.result.challenge_url, 'authenticationResult.result.secondary_url', 'Authentication Challenge', false);
                    this.doPolling(authenticationResult.result.secondary_url, charge_3ds_id);
                }
                else if ((_b = authenticationResult === null || authenticationResult === void 0 ? void 0 : authenticationResult.result) === null || _b === void 0 ? void 0 : _b.decoupled_challenge) {
                    this.eventEmitter.emit(GPAYMENTS_EVENT.DECOUPLED, this.parseHandleResponse(authenticationResult, charge_3ds_id));
                    this.doPolling(authenticationResult.result.secondary_url, charge_3ds_id);
                }
            }
            else
                return this.eventEmitter.emit(GPAYMENTS_EVENT.AUTH_ERROR, this.parseHandleResponse(authenticationResult, charge_3ds_id));
        }, (err) => {
            this.eventEmitter.emit(GPAYMENTS_EVENT.ERROR, this.parseError(err, charge_3ds_id));
        });
    }
}
//# sourceMappingURL=../../../src/lib/canvas-3ds/services/gpayments-service.js.map