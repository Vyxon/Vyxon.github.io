import { GPaymentsService } from "./gpayments-service";
import { AccessToken } from "../../helper/access-token";
import { ApiInternal, API_AUTH_TYPE } from "../../api/api-internal";
import { ENV } from "../../components/env";
const STANDALONE_3DS_GATEWAYS = {
    GPAYMENTS: "GPayments",
};
export class Standalone3dsService {
    constructor(container, eventEmitter) {
        this.env = ENV.SANDBOX;
        this.container = container;
        this.eventEmitter = eventEmitter;
    }
    load(token, options) {
        const parsedToken = AccessToken.validateJWT(token);
        if (!parsedToken)
            throw new Error("Invalid charge token");
        const tokenData = AccessToken.extractData(parsedToken.body);
        const api = new ApiInternal(token, API_AUTH_TYPE.TOKEN);
        api.setEnv(this.env, this.alias);
        switch (tokenData.service_type) {
            case STANDALONE_3DS_GATEWAYS.GPAYMENTS:
                new GPaymentsService(this.container, api, this.eventEmitter).load(tokenData, options.title);
                break;
        }
    }
    setEnv(env, alias) {
        this.env = env;
        this.alias = alias;
    }
}
//# sourceMappingURL=../../../src/lib/canvas-3ds/services/standalone3ds-service.js.map