import { Browser } from "../helper/browser";
import { PopupRunner } from "./popup.runner";
import { Url } from "../helper/url";
const REDIRECT_URI_SUCCESS = '/checkout/afterpay/merchant/{{merchant}}/success';
const REDIRECT_URI_ERROR = '/checkout/afterpay/merchant/{{merchant}}/error';
const CHECKOUT_URL = '/checkout/afterpay/init';
export class AfterpayRunner extends PopupRunner {
    getSuccessRedirectUri() {
        return this.widgetEnv.getConf().url + REDIRECT_URI_SUCCESS.replace('{{merchant}}', encodeURIComponent(window.btoa(window.location.href)));
    }
    getErrorRedirectUri() {
        return this.widgetEnv.getConf().url + REDIRECT_URI_ERROR.replace('{{merchant}}', encodeURIComponent(window.btoa(window.location.href)));
    }
    next(checkoutData) {
        this.checkout = checkoutData;
        if (!Browser.isSupportPopUp())
            window.localStorage.setItem('paydock_checkout_token', JSON.stringify(this.checkout));
        this.popup.redirect(this.getRedirectUrl());
    }
    error(error, code, callback) {
        if (!code || code && code !== 'invalid_amount')
            return callback(true);
        this.popup.initError(error);
        return callback(false);
    }
    run() {
        if (this.isRunning())
            return;
        this.popup.setConfigs({
            width: 420,
            height: 715,
        });
        this.popup.init();
        this.background.initControl();
    }
    getRedirectUrl() {
        const env = (this.checkout.mode === 'live') ? 'live' : 'test';
        return this.widgetEnv.getConf().url + Url.extendSearchParams(CHECKOUT_URL, 'token', encodeURIComponent(this.checkout.reference_id)) + '&env=' + encodeURIComponent(env);
    }
}
//# sourceMappingURL=../../src/lib/checkout-button/afterpay.runner.js.map