import { Container } from "../components/container";
import { IDetails } from "../external-checkout/index";
import { Background } from "../components/background";
import { EventEmitter } from "../helper/event-emitter";
import { IPayPalMeta, IAfterpayMeta, IZipmoneyMeta } from "../components/param";
import { IRunner } from "./runner";
export interface IEventCheckoutFinishData {
    payment_source_token: string;
    checkout_email: string;
    checkout_holder: string;
    gateway_type: string;
}
/**
 *
 * @type {object}
 * @param {string} CLICK=click
 * @param {string} POPUP_REDIRECT=popup_redirect
 * @param {string} ERROR=error
 * @param {string} ACCEPTED=accepted
 * @param {string} FINISH=finish
 * @param {string} CLOSE=close
 */
export declare const CHECKOUT_BUTTON_EVENT: {
    CLICK: string;
    POPUP_REDIRECT: string;
    ERROR: string;
    REFERRED: string;
    DECLINED: string;
    CANCELLED: string;
    ACCEPTED: string;
    FINISH: string;
    CLOSE: string;
};
/**
 * Class CheckoutButton transform usual button into checkout
 *
 * @constructor
 *
 * @param {string} selector - Selector of html element.
 * @param {string} publicKey - PayDock users public key
 * @param {string} [gatewayId=default] - PayDock's gatewayId. By default or if put 'default', it will use the selected default gateway
 * @param {string} [type=PaypalClassic] - Type of gateway (PaypalClassic, Zipmoney)
 * @example
 * var widget = new CheckoutButton('#button', 'publicKey','gatewayId');
 **/
export declare class CheckoutButton {
    protected publicKey: string;
    protected gatewayId: string;
    protected gatewayType: string;
    protected eventEmitter: EventEmitter;
    protected container: Container;
    protected background: Background;
    protected details: IDetails;
    protected meta: IPayPalMeta;
    protected runner: IRunner;
    protected env: string;
    constructor(selector: string, publicKey: string, gatewayId?: string, gatewayType?: string);
    protected initCheckout(): void;
    protected initCheckoutHandlers(): void;
    protected checkToken(token: string, cb: () => void): void;
    protected createOneTimeToken(token: string): void;
    /**
     * This callback will be called for each event in payment source widget
     *
     * @callback listener
     */
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('click', function () {
     *
     * });
     * @param {string} eventName - Available event names [CHECKOUT_BUTTON_EVENT]{@link CHECKOUT_BUTTON_EVENT}
     * @param {listener} cb
     */
    on(name: string, handler: (data: {} | IEventCheckoutFinishData) => void): void;
    /**
     * Close popup window forcibly
     */
    close(): void;
    /**
     * After finish event of checkout button, data (dataType) will be insert to input (selector)
     *
     * @param {string} selector - css selector . [] #
     * @param {string} dataType - data type of IEventCheckoutFinishData [IEventCheckoutFinishData]{@link #IEventCheckoutFinishData}.
     */
    onFinishInsert(selector: string, dataType: string): void;
    /**
     * Method for setting meta information for checkout page
     *
     * @example
     * button.setMeta({
            brand_name: 'paydock',
            reference: '15',
            email: 'wault@paydock.com'
        });
     *
     * @param {(IPayPalMeta|IAfterpayMeta|IZipmoneyMeta)} meta - Data which can be shown on checkout page [IPayPalMeta]{@link IPayPalMeta} [IZipmoneyMeta]{@link IZipmoneyMeta} [IAfterpayMeta]{@link IAfterpayMeta}
     */
    setMeta(meta: IPayPalMeta | IAfterpayMeta | IZipmoneyMeta): void;
    /**
     * Method for setting backdrop description
     *
     * @example
     * button.setBackdropDescription('Custom description');
     *
     * @param {string} text - description which can be shown in overlay of back side checkout page
     */
    setBackdropDescription(text: string): void;
    /**
     * Method for setting backdrop title
     *
     * @example
     * button.setBackdropTitle('Custom title');
     *
     * @param {text} string - title which can be shown in overlay of back side checkout page
     */
    setBackdropTitle(text: string): void;
    /**
     * Method for setting suspended redirect uri. Redirect after referred checkout
     *
     *
     * @param {uri} string - uri for redirect (by default)
     */
    setSuspendedRedirectUri(uri: string): void;
    /**
     * Method for disable backdrop on the page.
     *
     * @example
     * button.turnOffBackdrop();
     *
     */
    turnOffBackdrop(): void;
    protected turnOffControlBackdrop(): void;
    protected turnOffLoaderBackdrop(): void;
    setEnv(env: string, alias?: string): void;
    getEnv(): string;
}
/**
 * @interface IEventCheckoutFinishData
 *
 * @param {string} [payment_source_token]
 */
