import { Container } from "../components/container";
import { ExternalCheckoutBuilder, ExternalCheckoutChecker } from "../external-checkout/index";
import { DEFAULT_ENV } from '../components/env';
import { Background } from "../components/background";
import { Event } from "../helper/event";
import { EventEmitter } from "../helper/event-emitter";
import { PaymentSourceBuilder, TYPE as TOKEN_TYPE } from "../payment-source/index";
import { EVENT } from "./runner";
import { ZipmoneyRunner } from "./zipmoney.runner";
import { GATEWAY_TYPE } from "../gateway/index";
import { PaypalRunner } from "./paypal.runner";
import { AfterpayRunner } from "./afterpay.runner";
/**
 *
 * @type {object}
 * @param {string} CLICK=click
 * @param {string} POPUP_REDIRECT=popup_redirect
 * @param {string} ERROR=error
 * @param {string} ACCEPTED=accepted
 * @param {string} FINISH=finish
 * @param {string} CLOSE=close
 */
export const CHECKOUT_BUTTON_EVENT = {
    CLICK: 'click',
    POPUP_REDIRECT: 'popupRedirect',
    ERROR: 'error',
    REFERRED: 'referred',
    DECLINED: 'declined',
    CANCELLED: 'cancelled',
    ACCEPTED: 'accepted',
    FINISH: 'finish',
    CLOSE: 'close',
};
/**
 * Class CheckoutButton transform usual button into checkout
 *
 * @constructor
 *
 * @param {string} selector - Selector of html element.
 * @param {string} publicKey - PayDock users public key
 * @param {string} [gatewayId=default] - PayDock's gatewayId. By default or if put 'default', it will use the selected default gateway
 * @param {string} [type=PaypalClassic] - Type of gateway (PaypalClassic, Zipmoney)
 * @example
 * var widget = new CheckoutButton('#button', 'publicKey','gatewayId');
 **/
export class CheckoutButton {
    constructor(selector, publicKey, gatewayId = 'default', gatewayType = GATEWAY_TYPE.PAYPAL) {
        this.publicKey = publicKey;
        this.gatewayId = gatewayId;
        this.gatewayType = gatewayType;
        this.details = null;
        this.meta = {};
        this.env = DEFAULT_ENV;
        this.eventEmitter = new EventEmitter();
        this.container = new Container(selector);
        this.background = new Background();
        switch (gatewayType) {
            case GATEWAY_TYPE.PAYPAL:
                this.runner = new PaypalRunner(publicKey);
                break;
            case GATEWAY_TYPE.AFTERPAY:
                this.runner = new AfterpayRunner(publicKey);
                break;
            case GATEWAY_TYPE.ZIPMONEY:
                this.runner = new ZipmoneyRunner(publicKey);
                break;
        }
        this.initCheckout();
        this.initCheckoutHandlers();
        this.runner.onStop(() => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.CLOSE, {});
        });
    }
    initCheckout() {
        this.container.on('click', (event) => {
            if (this.runner.isRunning())
                return;
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.CLICK, {});
            this.runner.run();
            let externalCheckout = new ExternalCheckoutBuilder(this.gatewayId, this.runner.getSuccessRedirectUri(), this.runner.getErrorRedirectUri());
            externalCheckout.setMeta(this.meta);
            externalCheckout.setEnv(this.env);
            externalCheckout.send(this.publicKey, (checkout) => {
                this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.POPUP_REDIRECT, {});
                this.runner.next(checkout);
            }, (error, code) => {
                this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.ERROR, {});
                this.runner.error(error, code, (close) => {
                    if (close)
                        this.close();
                });
            });
        });
    }
    initCheckoutHandlers() {
        this.runner.onCheckout(EVENT.SUCCESS, (checkout) => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.ACCEPTED, {});
            this.background.initLoader();
            this.close();
            this.checkToken(checkout.token, () => {
                this.createOneTimeToken(checkout.token);
            });
        });
        this.runner.onCheckout(EVENT.ERROR, () => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.ERROR, {});
            console.error('Error from checkout server');
            this.close();
        });
        this.runner.onCheckout(EVENT.REFERRED, () => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.REFERRED, {});
            this.close();
        });
        this.runner.onCheckout(EVENT.DECLINED, () => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.DECLINED, {});
            this.close();
        });
        this.eventEmitter.subscribe(CHECKOUT_BUTTON_EVENT.ERROR, () => {
            this.background.clear();
        });
        this.eventEmitter.subscribe(CHECKOUT_BUTTON_EVENT.FINISH, () => {
            this.background.clear();
        });
    }
    checkToken(token, cb) {
        let checker = new ExternalCheckoutChecker(token);
        checker.setEnv(this.env);
        checker.send(this.publicKey, (details) => {
            this.details = details;
            cb();
        }, () => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.ERROR, {});
            console.error('Error during creating payment source token');
        });
    }
    createOneTimeToken(token) {
        let paymentSourceToken = new PaymentSourceBuilder(this.gatewayId, token, TOKEN_TYPE.CHECKOUT_TOKEN);
        paymentSourceToken.setEnv(this.env);
        paymentSourceToken.send(this.publicKey, (token) => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.FINISH, {
                payment_source_token: token,
                checkout_email: this.details.checkout_email,
                checkout_holder: this.details.checkout_holder,
                gateway_type: this.details.gateway_type,
            });
        }, () => {
            this.eventEmitter.emit(CHECKOUT_BUTTON_EVENT.ERROR, {});
            console.error('Error during creating payment source token');
        });
    }
    /**
     * This callback will be called for each event in payment source widget
     *
     * @callback listener
     */
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('click', function () {
     *
     * });
     * @param {string} eventName - Available event names [CHECKOUT_BUTTON_EVENT]{@link CHECKOUT_BUTTON_EVENT}
     * @param {listener} cb
     */
    on(name, handler) {
        this.eventEmitter.subscribe(name, handler);
    }
    /**
     * Close popup window forcibly
     */
    close() {
        this.runner.stop();
    }
    /**
     * After finish event of checkout button, data (dataType) will be insert to input (selector)
     *
     * @param {string} selector - css selector . [] #
     * @param {string} dataType - data type of IEventCheckoutFinishData [IEventCheckoutFinishData]{@link #IEventCheckoutFinishData}.
     */
    onFinishInsert(selector, dataType) {
        this.on(CHECKOUT_BUTTON_EVENT.FINISH, (event) => {
            Event.insertToInput(selector, dataType, event);
        });
    }
    /**
     * Method for setting meta information for checkout page
     *
     * @example
     * button.setMeta({
            brand_name: 'paydock',
            reference: '15',
            email: 'wault@paydock.com'
        });
     *
     * @param {(IPayPalMeta|IAfterpayMeta|IZipmoneyMeta)} meta - Data which can be shown on checkout page [IPayPalMeta]{@link IPayPalMeta} [IZipmoneyMeta]{@link IZipmoneyMeta} [IAfterpayMeta]{@link IAfterpayMeta}
     */
    setMeta(meta) {
        this.meta = Object.assign(this.meta, meta);
    }
    /**
     * Method for setting backdrop description
     *
     * @example
     * button.setBackdropDescription('Custom description');
     *
     * @param {string} text - description which can be shown in overlay of back side checkout page
     */
    setBackdropDescription(text) {
        this.runner.setBackgroundDescription(text);
    }
    /**
     * Method for setting backdrop title
     *
     * @example
     * button.setBackdropTitle('Custom title');
     *
     * @param {text} string - title which can be shown in overlay of back side checkout page
     */
    setBackdropTitle(text) {
        this.runner.setBackgroundTitle(text);
    }
    /**
     * Method for setting suspended redirect uri. Redirect after referred checkout
     *
     *
     * @param {uri} string - uri for redirect (by default)
     */
    setSuspendedRedirectUri(uri) {
        this.runner.setCustomRedirectUri(uri);
    }
    /**
     * Method for disable backdrop on the page.
     *
     * @example
     * button.turnOffBackdrop();
     *
     */
    turnOffBackdrop() {
        this.turnOffControlBackdrop();
        this.turnOffLoaderBackdrop();
    }
    turnOffControlBackdrop() {
        this.runner.turnOffBackdrop();
    }
    turnOffLoaderBackdrop() {
        this.background.turnOffLoader();
    }
    setEnv(env, alias) {
        this.env = env;
        this.runner.setEnv(env, alias);
    }
    getEnv() {
        return this.env;
    }
}
/**
 * @interface IEventCheckoutFinishData
 *
 * @param {string} [payment_source_token]
 */
//# sourceMappingURL=../../src/lib/checkout-button/checkout-button.js.map