import { Runner } from "./runner";
import { Dispatcher } from "../components/dispatcher";
import { Popup } from "../components/popup";
import { Browser } from "../helper/browser";
;
export class PopupRunner extends Runner {
    constructor(publicKey) {
        super();
        this.publicKey = publicKey;
        this.checkout = null;
        this.dispatcher = new Dispatcher('checkout.paydock');
        setTimeout(() => this.dispatcher.restartDispatcher(), 200);
        this.popup = new Popup();
    }
    run() {
        if (this.isRunning())
            return;
        this.popup.init();
        this.background.initControl();
    }
    isRunning() {
        return this.popup.isExist();
    }
    next(checkoutData) {
        this.checkout = checkoutData;
        if (!Browser.isSupportPopUp())
            window.localStorage.setItem('paydock_checkout_token', JSON.stringify(this.checkout));
        this.popup.redirect(this.checkout.link);
    }
    continue() {
        this.popup.focus();
    }
    stop() {
        this.popup.close();
    }
    onStop(cb) {
        this.popup.onClose(() => {
            this.background.clear();
            this.checkout = null;
            cb();
        });
    }
    onCheckout(event, cb) {
        this.dispatcher.on(event, (data) => {
            if (this.checkout && this.checkout.reference_id === data.reference_id) {
                this.background.clear();
                cb(this.checkout);
            }
            else if (!Browser.isSupportPopUp()) {
                let item = window.localStorage.getItem('paydock_checkout_token');
                if (!item)
                    return;
                let checkout = JSON.parse(item);
                if (checkout && checkout.reference_id === data.reference_id) {
                    window.localStorage.removeItem('paydock_checkout_token');
                    this.checkout = checkout;
                    this.background.clear();
                    cb(this.checkout);
                }
            }
        });
    }
    setEnv(env, alias) {
        super.setEnv(env, alias);
        this.dispatcher.setEnv(env, alias);
        this.popup.setEnv(env);
    }
}
//# sourceMappingURL=../../src/lib/checkout-button/popup.runner.js.map