import "../../vendors/zipmoney";
import { EVENT, Runner } from "./runner";
import { Env, ENV } from '../components/env';
import { Url } from "../helper/url";
import { EventEmitter } from "../helper/event-emitter";
const ECHO_LINK = '/v1/echo';
const REDIRECT_URL_SUSPENDED = '/checkout/zipmoney';
export class ZipmoneyRunner extends Runner {
    constructor(publicKey) {
        super();
        this.publicKey = publicKey;
        this.checkout = null;
        this.runs = false;
        this.eventEmitter = new EventEmitter();
        this.echoEnv = new Env([
            { env: ENV.SANDBOX, url: 'https://api-sandbox.' },
            { env: ENV.SANDBOX_KOVENA, url: 'https://api-sandbox.' },
            { env: ENV.SANDBOX_DEMO, url: 'https://api-sandbox-demo.' },
            { env: ENV.SANDBOX_DEMO_KOVENA, url: 'https://api-sandbox-demo.' },
            { env: ENV.PROD, url: 'https://api.' },
            { env: ENV.STAGING, url: 'https://apista.' },
            { env: ENV.STAGING_2, url: 'https://apista-2.' },
            { env: ENV.STAGING_3, url: 'https://apista-3.' },
            { env: ENV.STAGING_4, url: 'https://apista-4.' },
            { env: ENV.STAGING_5, url: 'https://apista-5.' },
        ]);
    }
    run() {
        this.runs = true;
        this.background.initLoader();
    }
    isRunning() {
        return this.runs;
    }
    next(checkoutData) {
        this.background.clear();
        this.checkout = checkoutData;
        let checkoutLink = String(ECHO_LINK);
        checkoutLink = Url.extendSearchParams(checkoutLink, 'public_key', this.publicKey);
        checkoutLink = Url.extendSearchParams(checkoutLink, 'json_body', encodeURIComponent(JSON.stringify({
            redirect_uri: this.checkout.link,
        })));
        Zip.Checkout.init({
            checkoutUri: this.echoEnv.getConf().url + checkoutLink,
            onComplete: (args) => this.eventHandler(args),
            onError: (args) => this.eventHandler(args),
        });
    }
    onStop(cb) {
        this.eventEmitter.subscribe(EVENT.CLOSE, () => {
            this.background.clear();
            cb();
        });
    }
    onCheckout(event, cb) {
        this.eventEmitter.subscribe(event, () => {
            cb(this.checkout);
        });
    }
    eventHandler(args) {
        this.runs = false;
        switch (args.state) {
            case 'approved':
                this.eventEmitter.emit(EVENT.CLOSE, {});
                this.eventEmitter.emit(EVENT.SUCCESS, {});
                break;
            case 'declined':
                this.eventEmitter.emit(EVENT.CLOSE, {});
                this.eventEmitter.emit(EVENT.DECLINED, {});
                break;
            case 'cancelled':
                this.eventEmitter.emit(EVENT.CLOSE, {});
                break;
            case 'referred':
                this.eventEmitter.emit(EVENT.CLOSE, {});
                this.eventEmitter.emit(EVENT.REFERRED, {});
                break;
            default:
                console.warn('Unknown gateway status');
                break;
        }
    }
    getSuccessRedirectUri() {
        return (this.customRedirectUti)
            ? this.customRedirectUti
            : this.widgetEnv.getConf().url + String(REDIRECT_URL_SUSPENDED);
    }
    getErrorRedirectUri() {
        return this.getSuccessRedirectUri();
    }
    setEnv(env, alias) {
        super.setEnv(env, alias);
        this.echoEnv.setEnv(env, alias);
    }
}
//# sourceMappingURL=../../src/lib/checkout-button/zipmoney.runner.js.map