import { EventEmitter } from '../helper/event-emitter';
import { Event as EventHelper } from '../helper/event';
import { TEMPLATE as LOADER_TEMPLATE, STYLE as LOADER_STYLE } from "./loader";
import { Browser } from "../helper/browser";
/**
 *
 * @type {object}
 * @param {string} CLOSE=close
 * @param {string} FOCUS=focus
 */
export const TRIGGER = {
    CLOSE: 'close',
    FOCUS: 'focus',
};
const TEMPLATE = `
    <div class="checkout-container">
        <strong class="checkout-title" data-title>{{title}}</strong>
        <p data-description>{{description}}</p>
        <a href="#" data-continue>Continue</a>
        <a href="#" data-close>Close</a>
    </div>
`;
const STYLES = `
    .hide-continue-button [data-continue] {
        display: none;
    }
    
    .checkout-overlay .cs-loader-inner {
         color: #ddd;
    }

    .checkout-overlay { 
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0, 0.5);
        text-align: center;
        color: #fff;
        opacity: 0;
    }
    .checkout-overlay.display { 
        opacity: 1;
        transition: opacity 0.7s ease-out;
    }
    .checkout-overlay a { color: #00f; }
    .checkout-container {
        position: absolute;
        top: 50%;
        left: 0;
        width: 100%;
        margin-top: -{{width}}px;
    }
    .checkout-title {
        font-size: 24px;
        display: block;
        text-transform: uppercase;
    }
    [data-close] {
        position: fixed;
        right: 32px;
        top: 32px;
        width: 32px;
        height: 32px;
        opacity: 0.3;
        overflow: hidden;
        text-indent: -9999px;
    }
    [data-close]:hover { opacity: 1; }
    [data-close]:before, [data-close]:after {
        position: absolute;
        left: 15px;
        content: ' ';
        height: 33px;
        width: 2px;
        background-color: #00f;
    }
    [data-close]:before { transform: rotate(45deg); }
    [data-close]:after { transform: rotate(-45deg); }
`;
/**
 * Class Background create overlay for checkout
 *
 * @example
 * var overlay = new Background();
 **/
export class Background {
    constructor() {
        this.description = `Don't see the secure checkout browser? We'll help you re-launch the window to complete your purchase`;
        this.title = 'Checkout';
        this.overlay = null;
        this.style = null;
        this.showControl = true;
        this.showLoader = true;
        this.eventEmitter = new EventEmitter();
    }
    initControl() {
        if (this.isInit() || !this.showControl)
            return;
        if (!Browser.isSupportPopUp())
            return this.createLoader();
        this.createTemplate();
        this.createStyles();
        this.eventHandler();
    }
    initLoader() {
        if (this.isInit() || !this.showLoader)
            return;
        this.createStyles();
        this.createLoader();
    }
    eventHandler() {
        let closeButton = document.querySelector('[data-close]');
        let focusButton = document.querySelector('[data-continue]');
        if (closeButton)
            EventHelper.subscribe('click', closeButton, () => this.eventEmitter.emit(TRIGGER.CLOSE, {}));
        if (focusButton)
            EventHelper.subscribe('click', focusButton, () => this.eventEmitter.emit(TRIGGER.FOCUS, {}));
    }
    clear() {
        if (!this.style && !this.overlay)
            return;
        this.style.parentNode.removeChild(this.style);
        this.overlay.parentNode.removeChild(this.overlay);
        this.style = null;
        this.overlay = null;
    }
    createLoader() {
        let body = document.body || document.getElementsByTagName('body')[0];
        this.overlay = document.createElement('div');
        this.overlay.classList.add('checkout-overlay');
        this.overlay.setAttribute('checkout-overlay', ' ');
        this.overlay.innerHTML = LOADER_STYLE + LOADER_TEMPLATE;
        body.appendChild(this.overlay);
        setTimeout(() => {
            if (this.isInit())
                this.overlay.classList.add('display');
        }, 5);
    }
    createTemplate() {
        let body = document.body || document.getElementsByTagName('body')[0];
        let template = String(TEMPLATE);
        template = template.replace('{{description}}', this.description);
        template = template.replace('{{title}}', this.title);
        this.overlay = document.createElement('div');
        this.overlay.classList.add('checkout-overlay');
        this.overlay.setAttribute('checkout-overlay', ' ');
        this.overlay.innerHTML = template;
        body.appendChild(this.overlay);
        setTimeout(() => {
            if (this.isInit())
                this.overlay.classList.add('display');
        }, 5);
    }
    createStyles() {
        let head = document.head || document.getElementsByTagName('head')[0];
        let css = String(STYLES);
        let container = document.querySelector('.checkout-container');
        css = css.replace('{{width}}', container
            ? String(container.offsetHeight / 2)
            : '0');
        this.style = document.createElement('style');
        this.style.type = 'text/css';
        this.style.appendChild(document.createTextNode(css));
        head.appendChild(this.style);
    }
    setBackdropDescription(text) {
        this.description = text;
    }
    setBackdropTitle(text) {
        this.title = text;
    }
    onTrigger(triggerName, cb) {
        this.eventEmitter.subscribe(triggerName, cb);
    }
    isInit() {
        return !!(this.overlay && this.style);
    }
    hideContinueControl() {
        if (!this.isInit())
            return;
        this.overlay.classList.add('hide-continue-button');
    }
    turnOffControl() {
        this.showControl = false;
    }
    turnOffLoader() {
        this.showLoader = false;
    }
}
//# sourceMappingURL=../../src/lib/components/background.js.map