import { Event } from "../helper/event";
import { Env, ENV } from "./env";
const DISPATCHER_LINK = '/dispatcher';
const DISPATCHER_ELEMENT_ID = 'paydock-dispatcher';
;
export class Dispatcher {
    constructor(messageSource) {
        this.messageSource = messageSource;
        this.env = new Env([
            { env: ENV.SANDBOX, url: 'https://widget-sandbox.' },
            { env: ENV.SANDBOX_KOVENA, url: 'https://widget-sandbox.' },
            { env: ENV.SANDBOX_DEMO, url: 'https://widget-sandbox-demo.' },
            { env: ENV.SANDBOX_DEMO_KOVENA, url: 'https://widget-sandbox-demo.' },
            { env: ENV.PROD, url: 'https://widget.' },
            { env: ENV.STAGING, url: 'https://widsta.' },
            { env: ENV.STAGING_2, url: 'https://widsta-2.' },
            { env: ENV.STAGING_3, url: 'https://widsta-3.' },
            { env: ENV.STAGING_4, url: 'https://widsta-4.' },
            { env: ENV.STAGING_5, url: 'https://widsta-5.' },
        ]);
    }
    restartDispatcher() {
        let dispatcher = document.getElementById(DISPATCHER_ELEMENT_ID);
        if (dispatcher)
            dispatcher.parentNode.removeChild(dispatcher);
        let iFrame = document.createElement('iframe');
        iFrame.setAttribute('src', this.env.getConf().url + DISPATCHER_LINK);
        iFrame.id = DISPATCHER_ELEMENT_ID;
        iFrame.style.display = 'none';
        document.body.appendChild(iFrame);
    }
    on(name, cb) {
        Event.subscribe('message', window, (event) => {
            let data = null;
            try {
                data = JSON.parse(event.data);
            }
            catch (e) { }
            ;
            if (!data || data.message_source !== this.messageSource || data.event !== name)
                return;
            cb(data);
        });
    }
    setEnv(env, alias) {
        this.env.setEnv(env, alias);
        this.restartDispatcher();
    }
}
//# sourceMappingURL=../../src/lib/components/dispatcher.js.map