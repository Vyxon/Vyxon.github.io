export class ElementStyle {
    static check(stylableElements, element, states, styles) {
        for (let index in stylableElements) {
            if (!stylableElements.hasOwnProperty(index) || stylableElements[index].element !== element)
                continue;
            if (stylableElements[index].states.indexOf(states) === -1 && states)
                return false;
            for (let property in styles) {
                if (!styles.hasOwnProperty(property))
                    continue;
                if (stylableElements[index].styles.indexOf(property.replace('-', '_')) === -1)
                    return false;
            }
            return true;
        }
        return false;
    }
    static encode(element, states, styles) {
        let encodedStyles = [];
        for (let property in styles) {
            if (styles.hasOwnProperty(property))
                encodedStyles.push(`${property.replace('_', '-')}:${styles[property]}`);
        }
        let encodedStyleBlock = encodedStyles.join(';');
        if (states)
            return `${element}::${states}{${encodedStyleBlock}}`;
        else
            return `${element}{${encodedStyleBlock}}`;
    }
    static decode(data) {
        let state = (data.match('::(.*){') || ['', null])[1];
        let element = (state !== null)
            ? (data.match('(.*)::') || ['', ''])[1].trim()
            : (data.match('(.*){') || ['', ''])[1].trim();
        let body = (data.match('{(.*)}') || ['', ''])[1].split(';');
        let styles = {};
        for (let index in body) {
            if (!body.hasOwnProperty(index))
                continue;
            let style = body[index].split(':');
            if (!style && style.length !== 2)
                continue;
            styles[style[0].trim()] = (style[1] || '').trim();
        }
        return {
            element: element,
            state: state,
            styles: styles,
        };
    }
}
//# sourceMappingURL=../../src/lib/components/element-style.js.map