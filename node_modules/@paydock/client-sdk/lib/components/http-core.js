import { Env, ENV } from './env';
export class HttpCore {
    constructor() {
        this.env = new Env([
            { env: ENV.SANDBOX_KOVENA, url: 'https://api-sandbox.' },
            { env: ENV.SANDBOX_DEMO, url: 'https://api-sandbox-demo.' },
            { env: ENV.SANDBOX_DEMO_KOVENA, url: 'https://api-sandbox-demo.' },
            { env: ENV.SANDBOX, url: 'https://api-sandbox.' },
            { env: ENV.PROD, url: 'https://api.' },
            { env: ENV.STAGING, url: 'https://apista.' },
            { env: ENV.STAGING_2, url: 'https://apista-2.' },
            { env: ENV.STAGING_3, url: 'https://apista-3.' },
            { env: ENV.STAGING_4, url: 'https://apista-4.' },
            { env: ENV.STAGING_5, url: 'https://apista-5.' },
        ]);
    }
    setEnv(env, alias) {
        this.env.setEnv(env, alias);
    }
    getEnv() {
        return this.env.getEnv();
    }
    getUrl() {
        return this.env.getConf().url + this.getLink();
    }
    create(publicKey, data, cb, errorCb) {
        let request = new XMLHttpRequest();
        request.onload = () => {
            this.parser(request.responseText, request.status, cb, errorCb);
        };
        request.open('POST', this.getUrl(), true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.setRequestHeader('x-user-public-key', publicKey);
        request.send(JSON.stringify(data));
    }
    get(publicKey, cb, errorCb) {
        let request = new XMLHttpRequest();
        request.onload = () => {
            this.parser(request.responseText, request.status, cb, errorCb);
        };
        request.open('GET', this.getUrl(), true);
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.setRequestHeader('x-user-public-key', publicKey);
        request.send();
    }
    parser(text, status, cb, errorCb) {
        let res = {};
        try {
            res = JSON.parse(text);
        }
        catch (e) { }
        if ((status >= 200 && status < 300) || status === 302)
            return cb(res.resource.data, status);
        else
            errorCb(res.error || { message: 'unknown error' }, status);
    }
}
//# sourceMappingURL=../../src/lib/components/http-core.js.map