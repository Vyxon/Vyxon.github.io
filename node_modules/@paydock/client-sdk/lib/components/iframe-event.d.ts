export interface IEventData {
    event: string;
    purpose: string;
    message_source: string;
    ref_id?: string;
    widget_id: string;
}
/**
 * Interface of data from event.
 * @interface IEventData
 *
 * @param {string} event
 * @param {string} purpose
 * @param {string} message_source
 * @param {string} [ref_id]
 * */
export declare const EVENT: {
    AFTER_LOAD: string;
    SUBMIT: string;
    FINISH: string;
    VALIDATION_ERROR: string;
    SYSTEM_ERROR: string;
    CHECKOUT_SUCCESS: string;
    CHECKOUT_ERROR: string;
    VALIDATION: string;
    SELECT: string;
    UNSELECT: string;
    NEXT: string;
    PREV: string;
    META_CHANGE: string;
    RESIZE: string;
    CHARGE_AUTH_SUCCESS: string;
    CHARGE_AUTH_REJECT: string;
    CHARGE_AUTH_CANCELLED: string;
    ADDITIONAL_DATA_SUCCESS: string;
    ADDITIONAL_DATA_REJECT: string;
    CHARGE_AUTH: string;
};
export interface Listener {
    event: string;
    listener: (event: any) => void;
    widget_id: string;
}
export declare type Listeners = Listener[];
export declare class IFrameEvent {
    protected listeners: Listeners;
    constructor(subject: Window | null);
    emit(data: IEventData): void;
    on<T>(eventName: string, widgetId: string, cb: (data: T) => void): void;
    private subscribe;
}
