import { Event } from "../helper/event";
/**
 * Interface of data from event.
 * @interface IEventData
 *
 * @param {string} event
 * @param {string} purpose
 * @param {string} message_source
 * @param {string} [ref_id]
 * */
export const EVENT = {
    AFTER_LOAD: 'afterLoad',
    SUBMIT: 'submit',
    FINISH: 'finish',
    VALIDATION_ERROR: 'validationError',
    SYSTEM_ERROR: 'systemError',
    CHECKOUT_SUCCESS: 'checkoutSuccess',
    CHECKOUT_ERROR: 'checkoutError',
    VALIDATION: 'validation',
    SELECT: 'select',
    UNSELECT: 'unselect',
    NEXT: 'next',
    PREV: 'prev',
    META_CHANGE: 'metaChange',
    RESIZE: 'resize',
    CHARGE_AUTH_SUCCESS: 'chargeAuthSuccess',
    CHARGE_AUTH_REJECT: 'chargeAuthReject',
    CHARGE_AUTH_CANCELLED: 'chargeAuthCancelled',
    ADDITIONAL_DATA_SUCCESS: 'additionalDataCollectSuccess',
    ADDITIONAL_DATA_REJECT: 'additionalDataCollectReject',
    CHARGE_AUTH: 'chargeAuth',
};
export class IFrameEvent {
    constructor(subject) {
        this.listeners = [];
        if (!subject)
            return;
        Event.subscribe('message', subject, (event) => {
            let data;
            try {
                data = JSON.parse(event.data);
            }
            catch (error) { }
            if (!data) // @TODO add filter on message_source
                return;
            this.emit(data);
        });
    }
    emit(data) {
        for (let key in this.listeners) {
            if (this.listeners[key].event === data.event && data.widget_id === this.listeners[key].widget_id)
                this.listeners[key].listener.apply(this, [data]);
        }
    }
    on(eventName, widgetId, cb) {
        for (let event in EVENT) {
            if (!EVENT.hasOwnProperty(event))
                continue;
            if (eventName === EVENT[event]) {
                this.listeners.push({
                    event: eventName,
                    listener: cb,
                    widget_id: widgetId,
                });
            }
        }
    }
    subscribe(subject, listener) {
        if (subject.addEventListener) {
            subject.addEventListener("message", listener);
        }
        else {
            subject.attachEvent("onmessage", listener);
        }
    }
}
//# sourceMappingURL=../../src/lib/components/iframe-event.js.map