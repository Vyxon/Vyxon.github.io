import { EventEmitter } from '../helper/event-emitter';
import { TEMPLATE as LOADER_TEMPLATE, EXTRA_TEMPLATE as LOADER_EXTRA_TEMPLATE, STYLE as LOADER_STYLE, EXTRA_STYLE as LOADER_EXTRA_STYLE, } from "./loader";
import { Event } from "../helper/event";
import { ENV } from "./env";
import { Browser } from "../helper/browser";
const EVENT_CLOSE = 'close';
const ERROR_STYLES = `<style>
        .error-wrapper {
            color: #ff0000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }
        </style>`;
const ERROR_TEMPLATE = `<div class="error-wrapper"><div>{{error}}</div></div>`;
export class Popup {
    constructor() {
        this.configs = {
            width: 500,
            height: 500,
            scrollbars: true,
            resizable: true,
            top: 0,
            left: 0,
        };
        this.eventEmitter = new EventEmitter();
    }
    isExist() {
        return !!(this.getElement() && !this.getElement().closed);
    }
    getElement() {
        return this.window;
    }
    init() {
        if (!Browser.isSupportPopUp())
            return this.window = window;
        let configs = this.getConfigs();
        this.window = window.open('about:blank', '_blank', `width=${configs.width},height=${configs.height},top=${configs.top},left=${configs.left},scrollbars=${configs.scrollbars ? 'yes' : 'no'},resizable=${configs.resizable ? 'yes' : 'no'}`);
        this.showLoader();
        let timer = setInterval(() => {
            if (!this.isExist()) {
                clearInterval(timer);
                this.eventEmitter.emit(EVENT_CLOSE, {});
            }
        }, 200);
    }
    redirect(url) {
        if (!this.isExist())
            return;
        this.window.location.href = url;
    }
    close() {
        if (!this.isExist() || !this.getElement().close)
            return;
        this.getElement().close();
        this.window = null;
    }
    focus() {
        if (!this.isExist() || !this.getElement().focus)
            return;
        this.getElement().focus();
    }
    setConfigs(configs) {
        this.configs = Object.assign(this.configs, configs);
    }
    getNetConfigs() {
        return Object.assign({}, this.configs);
    }
    getConfigs() {
        let configs = this.getNetConfigs();
        configs.left = window.screenX + (window.screen.width / 2 - configs.width / 2);
        configs.top = window.screenY + (window.screen.height / 2 - configs.height / 2);
        return configs;
    }
    onClose(cb) {
        this.eventEmitter.subscribe(EVENT_CLOSE, cb);
    }
    initError(error) {
        this.getElement().document.write(".");
        let body = this.getElement().document.body || this.getElement().document.getElementsByTagName('body')[0];
        body.innerHTML = ERROR_STYLES + ERROR_TEMPLATE.replace('{{error}}', error);
    }
    showLoader() {
        this.getElement().document.write(".");
        let body = this.getElement().document.body || this.getElement().document.getElementsByTagName('body')[0];
        body.innerHTML = LOADER_STYLE + LOADER_TEMPLATE;
        if (this.env !== ENV.STAGING || this.env !== ENV.STAGING_2 || this.env !== ENV.STAGING_3 || this.env !== ENV.STAGING_4 || this.env !== ENV.STAGING_5)
            return;
        let clickCount = 0;
        Event.subscribe('click', body, () => {
            clickCount++;
            if (clickCount !== 5)
                return;
            body.innerHTML = LOADER_EXTRA_STYLE + LOADER_EXTRA_TEMPLATE;
        });
    }
    setEnv(env) {
        this.env = env;
    }
}
//# sourceMappingURL=../../src/lib/components/popup.js.map