import { ObjectHelper } from '../helper/object';
/**
 * Interface for classes that represent a trigger data.
 * @interface ITriggerData
 *
 * @param {string} [configuration_token]
 * @param {string} [tab_number]
 * @param {string} [elements]
 * @param {string} [form_values]
 * */
/**
 * List of available triggers
 *
 * @type {object}
 * @param {string} SUBMIT_FORM=submit_form
 * @param {string} CHANGE_TAB=tab
 * @param {string} HIDE_ELEMENTS=hide_elements
 * @param {string} SHOW_ELEMENTS=show_elements
 * @param {string} REFRESH_CHECKOUT=refresh_checkout
 * @param {string} UPDATE_FORM_VALUES=update_form_values
 * @param {string} INIT_CHECKOUT=init_checkout
 */
export const TRIGGER = {
    SUBMIT_FORM: 'submit_form',
    CHANGE_TAB: 'tab',
    HIDE_ELEMENTS: 'hide_elements',
    SHOW_ELEMENTS: 'show_elements',
    REFRESH_CHECKOUT: 'refresh_checkout',
    UPDATE_FORM_VALUES: 'update_form_values',
    INIT_CHECKOUT: 'init_checkout',
};
export class Trigger {
    constructor(iFrame) {
        this.iFrame = iFrame;
    }
    push(triggerName, data = {}) {
        if (!this.iFrame.isExist())
            return;
        if (ObjectHelper.values(TRIGGER).indexOf(triggerName) === -1)
            console.warn('unsupported trigger type');
        let body = {
            trigger: triggerName,
            destination: 'widget.paydock',
            data: data,
        };
        this.iFrame.getElement().contentWindow.postMessage(JSON.stringify(body), '*');
    }
}
//# sourceMappingURL=../../src/lib/components/trigger.js.map