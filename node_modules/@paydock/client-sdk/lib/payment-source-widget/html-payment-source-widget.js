import { PaymentSourceWidget } from "./payment-source-widget";
import { Container } from "../components/container";
import { IFrame } from "../components/iframe";
import { EVENT, IFrameEvent } from "../components/iframe-event";
import { Event as EventHelper } from "../helper/event";
/**
 * Interface of data from event.
 * @interface IEventSelectData
 *
 * @param {string} event
 * @param {string} purpose
 * @param {string} message_source
 * @param {string} [ref_id]
 * @param {string} customer_id
 * @param {string} payment_source_id
 * @param {string} gateway_id
 * @param {boolean} primary
 * @param {string} [widget_id]
 * @param {string} [card_number_last4]
 * @param {string} [card_scheme]
 * @param {string} gateway_type
 * @param {string} [checkout_email]
 * @param {string} payment_source_type
 * @param {string} [account_name]
 * @param {string} [account_number]
 * */
/**
 * Interface of data from event.
 * @interface IEventPaginationData
 *
 * @param {string} event
 * @param {string} purpose
 * @param {string} message_source
 * @param {string} [ref_id]
 * @param {number} total_item
 * @param {number} skip
 * @param {number} limit
 * */
/**
 * Interface of data from event.
 * @interface IEventAfterLoadData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {number} total_item Pagination param. Total item count
 * @param {number} skip Pagination param. Skip items from first item
 * @param {number} limit Pagination param. Query limit
 * */
/**
 * Interface of data from event.
 * @interface IEventFinishData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * */
/**
* Interface of data from event.
* @interface IEventSizeData
*
* @param {number} event Event name
* @param {number} purpose System variable. Purpose of event
* @param {string} message_source System variable. Event source
* @param {string} [ref_id] Custom value for identify result of processed operation
* @param {number} height Height of iFrame
* @param {number} width Width of iFrame
* */
/**
 * List of available event's name
 * @const EVENT
 *
 * @type {object}
 * @param {string} AFTER_LOAD=afterLoad
 * @param {string} SYSTEM_ERROR=systemError
 * @param {string} SELECT=select
 * @param {string} UNSELECT=unselect
 * @param {string} NEXT=next
 * @param {string} PREV=prev
 * @param {string} META_CHANGE=metaChange
 * @param {string} RESIZE=resize
 */
/**
 * Class HtmlPaymentSourceWidget include method for working on html
 * @constructor
 * @extends PaymentSourceWidget
 *
 * @param {string} selector - Selector of html element. Container for widget
 * @param {string} publicKey - PayDock users public key
 * @param {string} queryToken - PayDock's query token that represents params to search customer by id or reference
 * @example
 *  * var widget = new HtmlPaymentSourceWidget('#widget', 'publicKey','queryToken');

 **/
export class HtmlPaymentSourceWidget extends PaymentSourceWidget {
    constructor(selector, publicKey, queryToken) {
        super(publicKey, queryToken);
        this.container = new Container(selector);
        this.iFrame = new IFrame(this.container);
        this.event = new IFrameEvent(window);
    }
    /**
     * The final method to beginning, the load process of widget to html
     *
     */
    load() {
        this.iFrame.load(this.getIFrameUrl(), { title: 'Payment Sources' });
    }
    /**
     * This callback will be called for each event in payment source widget
     *
     * @callback listener--PaymentSourceWidget
     * @param {IEventData | IEventSelectData | IEventPaginationData | IEventAfterLoadData} response
     */
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('select', function (data) {
     *      console.log(data);
     * });
     * @param {string} eventName - Available event names [EVENT]{@link EVENT}
     * @param {listener--PaymentSourceWidget} cb
     */
    on(eventName, cb) {
        this.event.on(eventName, this.link.getParams().widget_id, cb);
    }
    /**
     * Using this method you can hide widget after load
     * @param {boolean} [saveSize=false] - using this param you can save iframe's size
     */
    hide(saveSize) {
        console.info('PayDock SDK');
        this.iFrame.hide(saveSize);
    }
    /**
     * Using this method you can show widget after using hide method
     *
     */
    show() {
        this.iFrame.show();
    }
    /**
     * Using this method you can reload widget
     *
     */
    reload() {
        this.iFrame.remove();
        this.load();
    }
    /**
     * After select event of widget, data (dataType) will be insert to input (selector)
     *
     * @param {string} selector - css selector . [] #
     * @param {string} dataType - data type of [IEventSelectData]{@link IEventSelectData}.
     */
    onSelectInsert(selector, dataType) {
        this.on(EVENT.SELECT, (event) => {
            EventHelper.insertToInput(selector, dataType, event);
        });
    }
}
//# sourceMappingURL=../../src/lib/payment-source-widget/html-payment-source-widget.js.map