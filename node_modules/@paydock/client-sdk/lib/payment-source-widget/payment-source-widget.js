import { Link, PAYMENT_SOURCE_LINK } from '../components/link';
import { PAYMENT_SOURCE_TYPE, STYLE } from '../components/param';
import { ObjectHelper } from '../helper/object';
/**
 *
 * Class PaymentSourceWidget include method for for creating iframe url
 * @constructor
 *
 * @param {string} publicKey - PayDock users public key
 * @param {string} customer - PayDock's customer_id or customer_reference (In order to use the customer_reference, you must explicitly specify useReference as true)
 * @param {boolean} [useReference=false]
 *
 * @example
 * var widget = new PaymentSourceWidget('publicKey','customerId');
 * // or
 * var widget = new PaymentSourceWidget('publicKey', customerReference, true);
 **/
export class PaymentSourceWidget {
    constructor(publicKey, queryToken) {
        this.configs = [];
        this.configTokens = [];
        this.link = new Link(PAYMENT_SOURCE_LINK);
        this.link.setParams({ public_key: publicKey, query_token: queryToken });
    }
    /**
     * Object contain styles for widget
     *
     * @example
     * widget.setStyles({
     *       background_color: 'rgb(0, 0, 0)',
     *       border_color: 'yellow',
     *       text_color: '#FFFFAA',
     *       icon_size: 'small',
     *       font_size: '20px'
     *   });
     * @param {IStyles} fields - name of styles which can be shown in widget [STYLE]{@link STYLE}
     */
    setStyles(styles) {
        for (let index in styles) {
            if (styles.hasOwnProperty(index))
                this.setStyle(index, styles[index]);
        }
    }
    setStyle(param, value) {
        if (ObjectHelper.values(STYLE).indexOf(param) !== -1)
            this.link.setParams({ [param]: value });
        else
            console.warn(`Widget::setStyle[s: unsupported style param ${param}`);
    }
    /**
     * Current method can set custom ID to identify the data in the future
     *
     * @example
     * widget.setRefId('id');
     *
     * @param {string} refId - custom id
     */
    setRefId(refId) {
        this.link.setParams({ ref_id: refId });
    }
    /**
     * Current method can set limit for payment sources count. In case when limit sets less then general count will be shown pagination buttons prev and next.
     *
     * @param {string} count - payment source count
     */
    setLimit(count) {
        this.link.setParams({ limit: count });
    }
    /**
     * Current method can change environment. By default environment = sandbox
     * Also we can change domain alias for this environment. By default domain_alias = paydock.com
     *
     * @example
     * widget.setEnv('production');
     * @param {string} env - sandbox, production
     * @param {string} [alias] - Own domain alias
     */
    setEnv(env, alias) {
        this.link.setEnv(env, alias);
        for (let index in this.configs) {
            if (this.configs.hasOwnProperty(index))
                this.configs[index].setEnv(env, alias);
        }
    }
    getEnv() {
        this.link.getEnv();
    }
    /**
     * Method for getting iframe's url
     */
    getIFrameUrl() {
        return this.link.getUrl();
    }
    /**
     * Show payment source inside widget only with requested gateway ids
     *
     *
     * @param {string[]} ids - List of paydock gateway_id
     */
    filterByGatewayIds(ids) {
        this.link.setParams({ gateway_ids: ids.join(',') });
    }
    /**
     *
     * Show payment source inside widget only with requested payment source types
     *
     * @param types - List of payment source types. Available parameters [PAYMENT_TYPE]{@link PAYMENT_TYPE}
     */
    filterByTypes(types) {
        let supportedTypes = [];
        for (let type of types) {
            if (!types.hasOwnProperty(type))
                continue;
            if (ObjectHelper.values(PAYMENT_SOURCE_TYPE).indexOf(type) === -1)
                console.warn(`PaymentSourceWidget::filterByTypes: unsupported type ${type}`);
            else
                supportedTypes.push(type);
        }
        this.link.setParams({ payment_source_types: supportedTypes.join(',') });
    }
    /**
     * Method for setting a custom language code
     *
     * @example
     * config.setLanguage('en');
     * @param {string} code - ISO 639-1
     */
    setLanguage(code) {
        this.link.setParams({ language: code });
    }
}
//# sourceMappingURL=../../src/lib/payment-source-widget/payment-source-widget.js.map