import { Container } from '../components/container';
import { IFrame } from '../components/iframe';
import { Trigger } from '../components/trigger';
import { STYLE } from '../components/param';
import { Link, VAULT_DISPLAY_WIDGET_LINK } from '../components/link';
import { ObjectHelper } from '../helper/object';
import { VaultDisplayIframeEvent } from '../components/vault-display-iframe-event';
/**
 * Class VaultDisplayWidget include method for working on html
 * @constructor
 *
 * @example
 * var widget = new VaultDisplayWidget('#widget', 'token');
 *
 * @param {string} selector - Selector of html element. Container for widget
 * @param {string} token - One time token
 **/
export class VaultDisplayWidget {
    constructor(selector, token) {
        this.validationData = {};
        this.configs = [];
        this.container = new Container(selector);
        this.iFrame = new IFrame(this.container);
        this.triggerElement = new Trigger(this.iFrame);
        this.event = new VaultDisplayIframeEvent(window);
        this.vaultDisplayToken = token;
        this.link = new Link(VAULT_DISPLAY_WIDGET_LINK);
        this.link.setParams({ vault_display_token: token });
    }
    /**
     * Current method can change environment. By default environment = sandbox.
     * Also we can change domain alias for this environment. By default domain_alias = paydock.com
     *
     * @example
     * widget.setEnv('production', 'paydock.com');
     * @param {string} env - sandbox, production
     * @param {string} [alias] - Own domain alias
     */
    setEnv(env, alias) {
        this.link.setEnv(env, alias);
    }
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('after_load', function (data) {
     *      console.log(data);
     * });
     * // or
     *  widget.on('after_load').then(function (data) {
     *      console.log(data);
     * });
     * @param {string} eventName - Available event names [VAULT_DISPLAY_EVENT]{@link VAULT_DISPLAY_EVENT}
     * @param {listener} [cb]
     * @return {Promise<IEventData | void>}
     */
    on(eventName, cb) {
        if (typeof cb === "function")
            return this.event.on(eventName, this.link.getParams().widget_id, cb);
        return new Promise((resolve) => this.event.on(eventName, this.link.getParams().widget_id, (res) => resolve(res)));
    }
    /**
     * Object contain styles for widget
     *
     * @example
     * widget.setStyles({
     *       background_color: '#fff',
     *       border_color: 'yellow',
     *       text_color: '#FFFFAA',
     *       button_color: 'rgba(255, 255, 255, 0.9)',
     *       font_size: '20px',
     *       fort_family: 'fantasy'
     *   });
     * @param {VaultDisplayStyle} fields - name of styles which can be shown in widget [VAULT_DISPLAY_STYLE]{@link VAULT_DISPLAY_STYLE}
     */
    setStyles(styles) {
        for (let index in styles) {
            if (styles.hasOwnProperty(index))
                this.setStyle(index, styles[index]);
        }
    }
    setStyle(param, value) {
        if (ObjectHelper.values(STYLE).indexOf(param) !== -1)
            this.link.setParams({ [param]: value });
        else
            console.warn(`Widget::setStyle[s: unsupported style param ${param}`);
    }
    /**
     * The final method to beginning, the load process of widget to html
     *
     */
    load() {
        this.iFrame.load(this.link.getUrl(), { title: 'Vault Display' });
    }
}
//# sourceMappingURL=../../src/lib/vault-display-widget/vault-display-widget.js.map