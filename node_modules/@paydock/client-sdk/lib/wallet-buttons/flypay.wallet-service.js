import { IFrame } from "../components/iframe";
import { Link, FLYPAY_LINK, FLYPAY_LOGO_LINK } from "../components/link";
import { FlypayIframeEvent, FLYPAY_EVENT, } from "../components/flypay-iframe-event";
import { WalletTrigger, TRIGGER } from "../components/wallet-trigger";
import { WalletBackground } from "../components/wallet-background";
import { TRIGGER as BACKGROUND_TRIGGER } from "../components/background";
import { WalletService, WALLET_EVENT, } from "./wallet-service";
export class FlypayWalletService extends WalletService {
    constructor(token, meta) {
        super(token, meta);
        this.link = new Link(FLYPAY_LINK);
        const { amount, currency, id, gateway_mode, request_shipping } = meta;
        this.link.setParams(Object.assign({ token,
            amount,
            currency,
            gateway_mode, credentials: id }, (request_shipping ? { request_shipping } : {})));
        this.token = token;
        this.event = new FlypayIframeEvent(window);
    }
    load(container) {
        this.container = container;
        this.iFrame = new IFrame(this.container);
        const widgetId = this.link.getParams().widget_id;
        this.triggerElement = new WalletTrigger(this.iFrame, widgetId);
        this.setupIFrameEvents(widgetId);
        this.background = this.initBackground();
        this.iFrame.load(this.link.getUrl());
        return;
    }
    close() {
        this.triggerElement.push(TRIGGER.CLOSE);
        this.background.clear();
    }
    update(data) {
        this.triggerElement.push(TRIGGER.UPDATED, data);
    }
    setEnv(env) {
        this.link.setEnv(env);
        return this;
    }
    initBackground() {
        const bg = new WalletBackground(this.link.getNetUrl().replace(FLYPAY_LINK, FLYPAY_LOGO_LINK));
        bg.setBackdropTitle("");
        bg.setBackdropDescription("");
        bg.onTrigger(BACKGROUND_TRIGGER.CLOSE, () => this.triggerElement.push(TRIGGER.CLOSE));
        return bg;
    }
    setupIFrameEvents(widgetId) {
        this.event.on(FLYPAY_EVENT.UNAVAILABLE, widgetId, (_data) => this.eventEmitter.emit(WALLET_EVENT.UNAVAILABLE, null));
        this.event.on(FLYPAY_EVENT.START_LOADING, widgetId, (_data) => this.background.initControl());
        this.event.on(FLYPAY_EVENT.END_LOADING, widgetId, (_data) => this.background.clear());
        this.event.on(FLYPAY_EVENT.UPDATE, widgetId, (data) => {
            this.eventEmitter.emit(WALLET_EVENT.UPDATE, this.parseUpdateData(data));
        });
        this.event.on(FLYPAY_EVENT.PAYMENT_SUCCESSFUL, widgetId, (data) => {
            this.eventEmitter.emit(WALLET_EVENT.PAYMENT_SUCCESS, this.parsePaymentSuccessfulData(data));
            if (!this.iFrame.getElement())
                this.background.clear();
        });
        this.event.on(FLYPAY_EVENT.PAYMENT_IN_REVIEW, widgetId, (data) => {
            this.eventEmitter.emit(WALLET_EVENT.PAYMENT_IN_REVIEW, this.parsePaymentSuccessfulData(data));
            if (!this.iFrame.getElement())
                this.background.clear();
        });
        this.event.on(FLYPAY_EVENT.PAYMENT_ERROR, widgetId, (data) => {
            this.eventEmitter.emit(WALLET_EVENT.PAYMENT_ERROR, data);
            if (!this.iFrame.getElement())
                this.background.clear();
        });
    }
    parsePaymentSuccessfulData(data) {
        var _a;
        return {
            id: this.meta.id,
            amount: data.amount,
            currency: data.currencyCode,
            status: (_a = data.charge) === null || _a === void 0 ? void 0 : _a.status,
        };
    }
    parseUpdateData(data) {
        return Object.assign(Object.assign(Object.assign({ wallet_response_code: data.responseCode, wallet_session_id: data.sessionId }, data.paymentMethodDetails ? {
            payment_source: {
                wallet_payment_method_id: data.paymentMethodDetails.paymentMethodId,
                card_number_last4: data.paymentMethodDetails.lastFourDigitsOfPan,
                card_scheme: data.paymentMethodDetails.paymentScheme,
            },
        } : {}), data.loyaltyAccountSummary ? {
            wallet_loyalty_account: {
                id: data.loyaltyAccountSummary.loyaltyAccountId,
                barcode: data.loyaltyAccountSummary.loyaltyAccountBarcode,
            },
        } : {}), data.deliveryAddressDetails ? {
            shipping: {
                address_line1: data.deliveryAddressDetails.line1,
                address_line2: data.deliveryAddressDetails.line2,
                address_postcode: data.deliveryAddressDetails.postalCode,
                address_city: data.deliveryAddressDetails.city,
                address_state: data.deliveryAddressDetails.state,
                address_country: data.deliveryAddressDetails.countryCode,
                address_company: data.deliveryAddressDetails.companyName,
                wallet_address_id: data.deliveryAddressDetails.addressId,
                post_office_box_number: data.deliveryAddressDetails.postOfficeBoxNumber,
                wallet_address_created_timestamp: data.deliveryAddressDetails.createdTimestamp,
                wallet_address_updated_timestamp: data.deliveryAddressDetails.updatedTimestamp,
                wallet_address_name: data.deliveryAddressDetails.name,
            },
        } : {});
    }
}
//# sourceMappingURL=../../src/lib/wallet-buttons/flypay.wallet-service.js.map