import { Container } from "../components/container";
import { IWalletService, IWalletServiceMeta, IWalletServiceUpdate, WalletService } from "./wallet-service";
import { GooglePayRawDataInitialization, GooglePayStyles, IGooglePayShippingOption } from "../components/param";
import { EventEmitter } from './../helper/event-emitter';
export declare class GoogleWalletService extends WalletService implements IWalletService {
    protected gatewayName: string;
    protected eventEmitter: EventEmitter;
    private paymentsClient;
    protected latestShippingChangePromiseResolve: (value: unknown) => void;
    protected latestShippingChangePromiseReject: () => void;
    protected selectedShippingOption: IGooglePayShippingOption;
    constructor(publicKey: string, meta: IWalletServiceMeta, gatewayName: string, eventEmitter: EventEmitter);
    protected getGatewayName(): string;
    protected getMerchantId(): string;
    protected getMetaStyles(): GooglePayStyles;
    protected getMetaRawDataInitialization(): GooglePayRawDataInitialization;
    protected isShippingRequired(): boolean;
    protected hasShippingOptions(): boolean;
    load(container: Container): Promise<void>;
    update(data: IWalletServiceUpdate): void;
    private checkAvailability;
    private mount;
    private loadPaymentData;
    private onPaymentAuthorized;
    private onPaymentDataChanged;
    private createRequest;
    private createPaymentDataRequest;
    private createCardData;
    private parseUpdateData;
    private formatShippingOptions;
}
