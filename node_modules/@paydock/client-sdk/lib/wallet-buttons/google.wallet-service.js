import { ENV } from "../components/env";
import { WalletService, WALLET_EVENT } from "./wallet-service";
import { WALLET_TYPE } from "../components/param";
export class GoogleWalletService extends WalletService {
    constructor(publicKey, meta, gatewayName, eventEmitter) {
        super(publicKey, meta);
        this.gatewayName = gatewayName;
        this.eventEmitter = eventEmitter;
        this.parseUpdateData = (data) => {
            var _a, _b, _c, _d, _e, _f;
            const shippingOption = (_b = (_a = this.meta) === null || _a === void 0 ? void 0 : _a.shipping_options) === null || _b === void 0 ? void 0 : _b.find((o) => { var _a; return o.id === ((_a = data === null || data === void 0 ? void 0 : data.shippingOptionData) === null || _a === void 0 ? void 0 : _a.id); });
            return Object.assign({ shipping: {
                    address_city: (_c = data.shippingAddress) === null || _c === void 0 ? void 0 : _c.locality,
                    address_state: (_d = data.shippingAddress) === null || _d === void 0 ? void 0 : _d.administrativeArea,
                    address_postcode: (_e = data === null || data === void 0 ? void 0 : data.shippingAddress) === null || _e === void 0 ? void 0 : _e.postalCode,
                    address_country: (_f = data === null || data === void 0 ? void 0 : data.shippingAddress) === null || _f === void 0 ? void 0 : _f.countryCode,
                } }, (shippingOption && {
                selected_shipping_option: {
                    id: shippingOption === null || shippingOption === void 0 ? void 0 : shippingOption.id,
                    label: shippingOption === null || shippingOption === void 0 ? void 0 : shippingOption.label,
                    detail: shippingOption === null || shippingOption === void 0 ? void 0 : shippingOption.detail,
                    type: shippingOption === null || shippingOption === void 0 ? void 0 : shippingOption.type,
                },
            }));
        };
        this.formatShippingOptions = (shipping_options) => shipping_options.map((option) => ({
            id: option.id,
            label: option.label,
            description: (option === null || option === void 0 ? void 0 : option.detail) || '',
        }));
        this.eventEmitter = eventEmitter;
    }
    getGatewayName() {
        return this.gatewayName;
    }
    getMerchantId() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.meta) === null || _a === void 0 ? void 0 : _a.credentials) === null || _b === void 0 ? void 0 : _b[WALLET_TYPE.GOOGLE]) === null || _c === void 0 ? void 0 : _c.merchant;
    }
    ;
    getMetaStyles() {
        var _a, _b, _c, _d;
        if (typeof ((_a = this.meta) === null || _a === void 0 ? void 0 : _a.style) === 'object' && 'google' in ((_b = this.meta) === null || _b === void 0 ? void 0 : _b.style))
            return (_d = (_c = this.meta) === null || _c === void 0 ? void 0 : _c.style) === null || _d === void 0 ? void 0 : _d.google;
        else
            return null;
    }
    ;
    getMetaRawDataInitialization() {
        var _a, _b, _c, _d, _e;
        if (((_a = this.meta) === null || _a === void 0 ? void 0 : _a.raw_data_initialization) && typeof ((_b = this.meta) === null || _b === void 0 ? void 0 : _b.raw_data_initialization) === 'object' && 'google' in ((_c = this.meta) === null || _c === void 0 ? void 0 : _c.raw_data_initialization))
            return (_e = (_d = this.meta) === null || _d === void 0 ? void 0 : _d.raw_data_initialization) === null || _e === void 0 ? void 0 : _e.google;
        else
            return null;
    }
    ;
    isShippingRequired() {
        return this.meta.request_shipping;
    }
    hasShippingOptions() {
        return this.meta.request_shipping && !!this.meta.shipping_options;
    }
    load(container) {
        if (!window.Promise) {
            // Given that this library does not rely in any polyfill for promises, and this integration depends on them, we early return if Promises are not supported for the browser (like I.E. 11).
            this.eventEmitter.emit(WALLET_EVENT.UNAVAILABLE, { wallet: WALLET_TYPE.GOOGLE });
            return;
        }
        return new Promise((resolve, reject) => {
            const googlePayJs = document.createElement("script");
            googlePayJs.type = "text/javascript";
            googlePayJs.src = "https://pay.google.com/gp/p/js/pay.js";
            googlePayJs.async = true;
            googlePayJs.onload = () => {
                var _a, _b, _c;
                if (!window.google) {
                    this.eventEmitter.emit(WALLET_EVENT.UNAVAILABLE, { wallet: WALLET_TYPE.GOOGLE });
                    reject();
                    return;
                }
                // Store default shipping option
                if (this.isShippingRequired() && this.hasShippingOptions()) {
                    this.selectedShippingOption = (_a = this.meta) === null || _a === void 0 ? void 0 : _a.shipping_options[0];
                }
                this.paymentsClient = new google.payments.api.PaymentsClient(Object.assign({ merchantInfo: Object.assign(Object.assign({}, (((_b = this.meta) === null || _b === void 0 ? void 0 : _b.merchant_name) ? { merchantName: (_c = this.meta) === null || _c === void 0 ? void 0 : _c.merchant_name } : {})), { merchantId: this.getMerchantId() }), paymentDataCallbacks: Object.assign({ onPaymentAuthorized: (paymentData) => this.onPaymentAuthorized(paymentData) }, (this.isShippingRequired()) && {
                        onPaymentDataChanged: (intermediatePaymentData) => this.onPaymentDataChanged(intermediatePaymentData),
                    }) }, this.env !== ENV.PROD ? { environment: "TEST" } : { environment: "PRODUCTION" }));
                this.checkAvailability().then((available) => {
                    if (!available) {
                        this.eventEmitter.emit(WALLET_EVENT.UNAVAILABLE, { wallet: WALLET_TYPE.GOOGLE });
                        reject();
                        return;
                    }
                    this.mount(container);
                    resolve();
                });
            };
            document.head.appendChild(googlePayJs);
        });
    }
    update(data) {
        var _a, _b, _c, _d;
        if (!this.latestShippingChangePromiseResolve || !this.latestShippingChangePromiseReject)
            return;
        if (!data.success)
            return this.latestShippingChangePromiseReject(); // TODO: check how to handle Error messages from Merchant at update() callback response
        const newAmount = ((_a = data === null || data === void 0 ? void 0 : data.body) === null || _a === void 0 ? void 0 : _a.amount) || this.meta.amount;
        const newShippingOptions = ((_b = data === null || data === void 0 ? void 0 : data.body) === null || _b === void 0 ? void 0 : _b.shipping_options) || this.meta.shipping_options;
        if (newAmount)
            this.meta.amount = newAmount;
        if (newShippingOptions) {
            this.meta.shipping_options = newShippingOptions;
            this.selectedShippingOption = newShippingOptions ? newShippingOptions[0] : undefined;
        }
        let paymentDataRequestUpdate = Object.assign({ newTransactionInfo: {
                totalPriceStatus: "FINAL",
                totalPriceLabel: this.meta.amount_label,
                totalPrice: (_c = this.meta.amount) === null || _c === void 0 ? void 0 : _c.toString(),
                currencyCode: this.meta.currency.toUpperCase(),
                countryCode: this.meta.country.toUpperCase(),
            } }, ((this.isShippingRequired() && this.hasShippingOptions()) && {
            newShippingOptionParameters: {
                defaultSelectedOptionId: (_d = this.selectedShippingOption) === null || _d === void 0 ? void 0 : _d.id,
                shippingOptions: this.formatShippingOptions(this.meta.shipping_options),
            },
        }));
        this.latestShippingChangePromiseResolve(paymentDataRequestUpdate);
    }
    checkAvailability() {
        return this.paymentsClient
            .isReadyToPay(this.createRequest())
            .then((response) => {
            return !!response.result;
        })
            .catch((err) => {
            console.error("Error checking GooglePay availability", err);
            return false;
        });
    }
    mount(container) {
        var _a, _b, _c;
        container.getElement().appendChild(this.paymentsClient.createButton({
            onClick: () => this.loadPaymentData(),
            buttonType: ((_a = this.getMetaStyles()) === null || _a === void 0 ? void 0 : _a.button_type) || 'pay',
            buttonSizeMode: ((_b = this.getMetaStyles()) === null || _b === void 0 ? void 0 : _b.button_size_mode) || "fill",
            buttonColor: ((_c = this.getMetaStyles()) === null || _c === void 0 ? void 0 : _c.button_color) || "default",
        }));
    }
    loadPaymentData() {
        this.paymentsClient.loadPaymentData(this.createPaymentDataRequest())
            // .then((paymentData) => {
            //     // if using gateway tokenization, pass this token without modification
            //     // this.paymentToken = paymentData.paymentMethodData.tokenizationData.token;
            // })
            .catch(() => {
            console.error('Error while loading payment data');
        });
    }
    onPaymentAuthorized(paymentData) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const billingAddressLine1 = (_c = (_b = (_a = paymentData.paymentMethodData) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.billingAddress) === null || _c === void 0 ? void 0 : _c.address1;
        const billingAddressLine2 = (_f = (_e = (_d = paymentData.paymentMethodData) === null || _d === void 0 ? void 0 : _d.info) === null || _e === void 0 ? void 0 : _e.billingAddress) === null || _f === void 0 ? void 0 : _f.address2;
        const shippingAddressLine1 = (_g = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _g === void 0 ? void 0 : _g.address1;
        const shippingAddressLine2 = (_h = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _h === void 0 ? void 0 : _h.address2;
        const shippingOptionMethod = (_j = this.selectedShippingOption) === null || _j === void 0 ? void 0 : _j.type;
        return new Promise((resolve) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            return this.eventEmitter.emit(WALLET_EVENT.PAYMENT_METHOD_SELECTED, {
                data: Object.assign({ customer: {
                        payment_source: Object.assign(Object.assign(Object.assign(Object.assign({ wallet_type: WALLET_TYPE.GOOGLE, card_name: (_a = paymentData.paymentMethodData) === null || _a === void 0 ? void 0 : _a.description, type: paymentData.paymentMethodData.type, card_scheme: (_c = (_b = paymentData.paymentMethodData) === null || _b === void 0 ? void 0 : _b.info) === null || _c === void 0 ? void 0 : _c.cardNetwork }, (billingAddressLine1 && { address_line1: billingAddressLine1 })), (billingAddressLine2 && { address_line2: billingAddressLine2 })), billingAddressLine2 && { address_line2: billingAddressLine2 }), { address_country: (_f = (_e = (_d = paymentData.paymentMethodData) === null || _d === void 0 ? void 0 : _d.info) === null || _e === void 0 ? void 0 : _e.billingAddress) === null || _f === void 0 ? void 0 : _f.countryCode, address_city: (_j = (_h = (_g = paymentData.paymentMethodData) === null || _g === void 0 ? void 0 : _g.info) === null || _h === void 0 ? void 0 : _h.billingAddress) === null || _j === void 0 ? void 0 : _j.locality, address_postcode: (_m = (_l = (_k = paymentData.paymentMethodData) === null || _k === void 0 ? void 0 : _k.info) === null || _l === void 0 ? void 0 : _l.billingAddress) === null || _m === void 0 ? void 0 : _m.postalCode, address_state: (_q = (_p = (_o = paymentData.paymentMethodData) === null || _o === void 0 ? void 0 : _o.info) === null || _p === void 0 ? void 0 : _p.billingAddress) === null || _q === void 0 ? void 0 : _q.administrativeArea, ref_token: paymentData.paymentMethodData.tokenizationData.token }),
                    } }, (this.isShippingRequired()) && {
                    shipping: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (shippingOptionMethod && { method: shippingOptionMethod })), (this.hasShippingOptions() && { options: this.meta.shipping_options })), (shippingAddressLine1 && { address_line1: shippingAddressLine1 })), (shippingAddressLine2 && { address_line2: shippingAddressLine2 })), { address_country: (_r = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _r === void 0 ? void 0 : _r.countryCode, address_city: (_s = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _s === void 0 ? void 0 : _s.locality, address_postcode: (_t = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _t === void 0 ? void 0 : _t.postalCode, address_state: (_u = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _u === void 0 ? void 0 : _u.administrativeArea, contact: {
                            first_name: (_v = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _v === void 0 ? void 0 : _v.name,
                            email: paymentData === null || paymentData === void 0 ? void 0 : paymentData.email,
                            phone: (_w = paymentData === null || paymentData === void 0 ? void 0 : paymentData.shippingAddress) === null || _w === void 0 ? void 0 : _w.phoneNumber,
                        } }),
                }),
                onSuccess: () => resolve({ transactionState: 'SUCCESS' }),
                onError: (message) => resolve({
                    transactionState: 'ERROR',
                    error: {
                        intent: 'PAYMENT_AUTHORIZATION',
                        message: message,
                        reason: 'PAYMENT_DATA_INVALID',
                    },
                }),
            });
        });
    }
    onPaymentDataChanged(intermediatePaymentData) {
        if (!this.isShippingRequired())
            return;
        const parsedUpdateData = this.parseUpdateData(intermediatePaymentData);
        this.eventEmitter.emit(WALLET_EVENT.UPDATE, parsedUpdateData);
        return new Promise((res, rej) => {
            this.latestShippingChangePromiseResolve = res;
            this.latestShippingChangePromiseReject = rej;
        });
    }
    createRequest() {
        return {
            apiVersion: 2,
            apiVersionMinor: 0,
            allowedPaymentMethods: [this.createCardData()],
            existingPaymentMethodRequired: true,
        };
    }
    createPaymentDataRequest() {
        var _a, _b, _c, _d;
        // Store default shipping option
        if (this.isShippingRequired() && this.hasShippingOptions()) {
            this.selectedShippingOption = (_a = this.meta) === null || _a === void 0 ? void 0 : _a.shipping_options[0];
        }
        const gateway = 'paydock';
        const gatewayMerchantId = this.getMerchantId();
        return Object.assign({ apiVersion: 2, apiVersionMinor: 0, allowedPaymentMethods: [
                Object.assign(Object.assign({}, this.createCardData()), { tokenizationSpecification: {
                        type: "PAYMENT_GATEWAY",
                        parameters: {
                            gateway,
                            gatewayMerchantId,
                        },
                    } }),
            ], transactionInfo: {
                totalPriceStatus: "FINAL",
                totalPriceLabel: this.meta.amount_label,
                totalPrice: this.meta.amount.toString(),
                currencyCode: this.meta.currency.toUpperCase(),
                countryCode: this.meta.country.toUpperCase(),
            }, merchantInfo: Object.assign(Object.assign({}, (((_b = this.meta) === null || _b === void 0 ? void 0 : _b.merchant_name) ? { merchantName: (_c = this.meta) === null || _c === void 0 ? void 0 : _c.merchant_name } : {})), { merchantId: gatewayMerchantId }), callbackIntents: [
                "PAYMENT_AUTHORIZATION",
                ...(this.isShippingRequired() ? ["SHIPPING_ADDRESS"] : []),
                ...(this.hasShippingOptions() ? ["SHIPPING_OPTION"] : []),
            ] }, (this.isShippingRequired() && Object.assign({ shippingAddressRequired: true }, (this.hasShippingOptions() && {
            shippingOptionRequired: true,
            shippingOptionParameters: {
                defaultSelectedOptionId: (_d = this.selectedShippingOption) === null || _d === void 0 ? void 0 : _d.id,
                shippingOptions: this.formatShippingOptions(this.meta.shipping_options),
            },
        }))));
    }
    createCardData() {
        const rawDataInitialization = this.getMetaRawDataInitialization();
        return rawDataInitialization || {
            type: "CARD",
            parameters: {
                allowedAuthMethods: ["PAN_ONLY", "CRYPTOGRAM_3DS"],
                allowedCardNetworks: [
                    "AMEX",
                    "DISCOVER",
                    "INTERAC",
                    "JCB",
                    "MASTERCARD",
                    "VISA",
                ],
                billingAddressRequired: !!this.meta.show_billing_address,
            },
        };
    }
}
//# sourceMappingURL=../../src/lib/wallet-buttons/google.wallet-service.js.map