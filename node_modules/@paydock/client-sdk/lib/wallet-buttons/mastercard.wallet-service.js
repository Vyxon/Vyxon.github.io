import { WALLET_GATEWAY, WALLET_TYPE } from "../components/param";
import { AppleWalletService } from "./apple.wallet-service";
import { GoogleWalletService } from "./google.wallet-service";
import { WalletService } from "./wallet-service";
export class MastercardWalletService extends WalletService {
    initializeChildWallets() {
        var _a, _b, _c, _d, _e, _f;
        this.childWallets = [];
        const hasAppleCredentials = !!((_c = (_b = (_a = this.meta) === null || _a === void 0 ? void 0 : _a.credentials) === null || _b === void 0 ? void 0 : _b.apple) === null || _c === void 0 ? void 0 : _c.merchant);
        const hasGoogleCredentials = !!((_f = (_e = (_d = this.meta) === null || _d === void 0 ? void 0 : _d.credentials) === null || _e === void 0 ? void 0 : _e.google) === null || _f === void 0 ? void 0 : _f.merchant);
        if (hasAppleCredentials && (!this.meta.wallets || this.meta.wallets.includes(WALLET_TYPE.APPLE)))
            this.childWallets.push(new AppleWalletService(this.publicKey, this.meta, this.getGatewayName(), this.eventEmitter));
        if (hasGoogleCredentials && (!this.meta.wallets || this.meta.wallets.includes(WALLET_TYPE.GOOGLE)))
            this.childWallets.push(new GoogleWalletService(this.publicKey, this.meta, this.getGatewayName(), this.eventEmitter));
    }
    getGatewayName() {
        return WALLET_GATEWAY.MASTERCARD;
    }
    update(data) {
        this.childWallets.forEach((child) => child.update(data));
    }
}
//# sourceMappingURL=../../src/lib/wallet-buttons/mastercard.wallet-service.js.map