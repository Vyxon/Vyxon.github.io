import { WALLET_TYPE } from "../components/param";
import { loadStripe } from "@stripe/stripe-js/pure";
import { WalletService, WALLET_EVENT, } from "./wallet-service";
export const UI_COMPLETION_STATE = {
    SUCCESS: "success",
    FAIL: "fail",
};
export class StripeWalletService extends WalletService {
    initPaymentRequest() {
        return this.stripe.paymentRequest({
            country: this.meta.country.toUpperCase(),
            currency: this.meta.currency.toLowerCase(),
            total: {
                label: this.meta.amount_label,
                amount: Math.floor(this.meta.amount * 100),
            },
            requestPayerName: this.meta.request_payer_name === true,
            requestPayerEmail: this.meta.request_payer_email === true,
            requestPayerPhone: this.meta.request_payer_phone === true,
        });
    }
    createWalletButton() {
        return this.stripe.elements().create("paymentRequestButton", {
            paymentRequest: this.paymentRequest,
        });
    }
    load(container) {
        return loadStripe(this.publicKey)
            .then((stripe) => {
            this.stripe = stripe;
            this.paymentRequest = this.initPaymentRequest();
        })
            .then(() => this.checkAvailability())
            .then((availability) => this.mount(container, availability))
            .then(() => this.setOnPaymentMethodSelected());
    }
    checkAvailability() {
        return this.paymentRequest
            .canMakePayment()
            .then((available) => {
            if (available) {
                const gpay_enabled = !this.meta.wallets ||
                    this.meta.wallets.includes(WALLET_TYPE.GOOGLE);
                const applepay_enabled = !this.meta.wallets ||
                    this.meta.wallets.includes(WALLET_TYPE.APPLE);
                // TODO: this isn't accurate. Discard Chrome saved cards and microsoft pay payment to show google pay button
                return {
                    google_pay: gpay_enabled && !available.applePay,
                    apple_pay: applepay_enabled && available.applePay,
                    flypay: false,
                };
            }
        });
    }
    mount(container, availability) {
        if (!availability || (!availability.apple_pay && !availability.google_pay))
            return this.eventEmitter.emit(WALLET_EVENT.UNAVAILABLE, null);
        this.createWalletButton().mount(container.getElement());
    }
    setOnPaymentMethodSelected() {
        this.paymentRequest.on("paymentmethod", (event) => {
            var _a, _b;
            const { paymentMethod: { id, card, billing_details: { name, address }, }, } = event;
            const data = {
                payment_method_id: id,
                customer: {
                    payer_name: event.payerName,
                    payer_email: event.payerEmail,
                    payer_phone: event.payerPhone,
                    payment_source: {
                        wallet_type: this.getWalletType((_a = card === null || card === void 0 ? void 0 : card.wallet) === null || _a === void 0 ? void 0 : _a.type),
                        card_name: name,
                        type: (_b = card === null || card === void 0 ? void 0 : card.wallet) === null || _b === void 0 ? void 0 : _b.type,
                        card_scheme: card === null || card === void 0 ? void 0 : card.brand,
                        card_number_last4: card === null || card === void 0 ? void 0 : card.last4,
                        expire_month: card === null || card === void 0 ? void 0 : card.exp_month,
                        expire_year: card === null || card === void 0 ? void 0 : card.exp_year,
                        address_line1: address.line1,
                        address_line2: address.line2,
                        address_city: address.city,
                        address_postcode: address.postal_code,
                        address_state: address.state,
                        address_country: address.country,
                    },
                },
            };
            this.eventEmitter.emit(WALLET_EVENT.PAYMENT_METHOD_SELECTED, {
                data,
                onSuccess: () => event.complete(UI_COMPLETION_STATE.SUCCESS),
                onError: (err) => event.complete(UI_COMPLETION_STATE.FAIL),
            });
        });
    }
    getWalletType(type) {
        if (!type)
            return null;
        return type === 'google_pay' ? WALLET_TYPE.GOOGLE : WALLET_TYPE.APPLE;
    }
}
//# sourceMappingURL=../../src/lib/wallet-buttons/stripe.wallet-service.js.map