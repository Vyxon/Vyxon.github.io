import { ENV } from "../components/env";
import { EventEmitter } from "../helper/event-emitter";
import { ObjectHelper } from "../helper/object";
export const WALLET_EVENT = {
    UNAVAILABLE: 'unavailable',
    UPDATE: 'update',
    PAYMENT_METHOD_SELECTED: 'payment_method_selected',
    PAYMENT_SUCCESS: 'payment_success',
    PAYMENT_IN_REVIEW: 'payment_in_review',
    PAYMENT_ERROR: 'payment_error',
    CALLBACK: 'callback',
};
export class WalletService {
    constructor(publicKey, meta) {
        this.publicKey = publicKey;
        this.meta = meta;
        this.env = ENV.SANDBOX;
        this.eventEmitter = new EventEmitter();
        this.initializeChildWallets();
    }
    initializeChildWallets() {
        this.childWallets = [];
    }
    getGatewayName() {
        // required for Google Pay direct integrations
        throw new Error("Method not implemented");
    }
    setEnv(env) {
        this.env = env;
        return this;
    }
    load(container) {
        this.childWallets.forEach((child) => child.load(container));
        return;
    }
    update(data) {
        // do nothing unless current wallet service overrides this method;
        return;
    }
    on(eventName, cb) {
        if (ObjectHelper.values(WALLET_EVENT).indexOf(eventName) === -1)
            throw (new Error("invalid wallet event"));
        if (typeof cb === 'function')
            return this.eventEmitter.subscribe(eventName, cb);
        return new Promise((resolve) => this.eventEmitter.subscribe(eventName, (res) => resolve(res)));
    }
}
//# sourceMappingURL=../../src/lib/wallet-buttons/wallet-service.js.map