import { MultiWidget } from "./multi-widget";
import { Container } from "../components/container";
import { IFrame } from "../components/iframe";
import { IFrameEvent, IEventData } from "../components/iframe-event";
import { Trigger, ITriggerData } from "../components/trigger";
import { IFormValidation, IFormValues } from '../components/param';
export interface IEventMetaData extends IEventData {
    configuration_token: string;
    type: string;
    gateway_type?: string;
    card_number_last4?: string;
    card_scheme?: string;
    card_number_length?: number;
    account_name?: string;
    account_number?: string;
}
export interface IEventAfterLoadData extends IEventData {
}
export interface IEventFinishData extends IEventData {
    payment_source: string;
}
/**
 * Interface of data from validation event.
 * @interface IFormValidation
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {boolean} [form_valid] Form is valid
 * @param {array} [invalid_fields] Invalid form fields
 * @param {array} [invalid_showed_fields] List of fields on which the error is already displayed
 * @param {array} [validators] List of validators with fields
 * */
/**
 * Interface of data from event.
 * @interface IEventMetaData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {string} configuration_token Token received from our API with widget data
 * @param {string} type Payment type 'card', 'bank_account'
 * @param {string} gateway_type Gateway type
 * @param {string} [card_number_last4] Last 4 digit of your card
 * @param {string} [card_scheme] Card scheme
 * @param {number} [card_number_length] Card number length
 * @param {string} [account_name] Bank account account name
 * @param {string} [account_number] Bank account account number
 * */
/**
 * Interface of data from event.
 * @interface IEventAfterLoadData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * */
/**
 * Interface of data from event.
 * @interface IEventFinishData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {string} payment_source One time token. Result from this endpoint [API docs](https://docs.paydock.com/#tokens)
 * */
/**
 * List of available event's name
 * @const EVENT
 *
 * @type {object}
 * @param {string} AFTER_LOAD=afterLoad
 * @param {string} SUBMIT=submit
 * @param {string} FINISH=finish
 * @param {string} VALIDATION=validation
 * @param {string} VALIDATION_ERROR=validationError
 * @param {string} SYSTEM_ERROR=systemError
 * @param {string} META_CHANGE=metaChange
 * @param {string} RESIZE=resize
 */
/**
 * List of available event's name
 * @const VAULT_DISPLAY_EVENT
 *
 * @type {object}
 * @param {string} AFTER_LOAD=afterLoad
 * @param {string} SYSTEM_ERROR=system_error
 * @param {string} CVV_SECURE_CODE_REQUESTED=cvv_secure_code_requested
 * @param {string} CARD_NUMBER_SECURE_CODE_REQUESTED=card_number_secure_code_requested
 * @param {string} ACCESS_FORBIDDEN=access_forbidden
 * @param {string} SESSION_EXPIRED=systemError
 * @param {string} SYSTEM_ERROR=session_expired
 * @param {string} OPERATION_FORBIDDEN=operation_forbidden
 */
/**
 * Class HtmlMultiWidget include method for working with html
 * @constructor
 * @extends MultiWidget
 *
 * @param {string} selector - Selector of html element. Container for widget
 * @param {string} publicKey - PayDock users public key
 * @param {(Configuration | string | Configuration[] | string[])} conf - exemplar[s] Configuration class OR configuration token
 * @example
 * var widget = new MultiWidget('#widget', 'publicKey','configurationToken'); // With a pre-created configuration token
 *
 * var widget = new MultiWidget('#widget', 'publicKey',['configurationToken', 'configurationToken2']); // With pre-created configuration tokens
 *
 * var widget = new MultiWidget('#widget', 'publicKey', new Configuration('gatewayId')); With Configuration
 *
 * var widget = new MultiWidget('#widget', 'publicKey',[ With Configurations
 *      Configuration() // default gateway_id,
 *      Configuration('gatewayId'),
 *      Configuration('gatewayId', 'bank_account')
 * ]);
 **/
export declare class HtmlMultiWidget extends MultiWidget {
    protected container: Container;
    protected iFrame: IFrame;
    protected triggerElement: Trigger;
    protected event: IFrameEvent;
    protected validationData: IFormValidation;
    constructor(selector: string, publicKey: string, conf: any);
    /**
     * The final method to beginning, the load process of widget to html
     *
     */
    load(): void;
    protected afterLoad(): void;
    /**
     * This callback will be called for each event in widget
     *
     * @callback listener
     * @param {IEventData | IEventFinishData | IEventMetaData | IFormValidation} response
     */
    on(eventName: string): Promise<IEventData | IEventMetaData | IEventFinishData | IFormValidation>;
    on(eventName: string, cb: (data: IEventData | IEventMetaData | IEventFinishData | IFormValidation) => void): any;
    /**
     * This callback will be called for every trigger
     *
     * @param {triggerName} triggers - submit_form, tab
     * @param {ITriggerData} data which will be sending to widget
     */
    trigger(triggerName: string, data?: ITriggerData): void;
    /**
     * Using this method you can get validation state information
     * @return {IFormValidation} Form validation object
     */
    getValidationState(): IFormValidation;
    /**
     * Using this method you can check if the form is valid
     * @return {boolean} Form is valid
     */
    isValidForm(): boolean;
    /**
     * Using this method you can check if a specific form field is invalid
     * @param {string} field - Field name
     * @return {boolean} Field is invalid
     */
    isInvalidField(field?: string): boolean;
    /**
     * Using this method you can check if an error is displayed on a specific field
     * @param {string} field - Field name
     * @return {boolean} Error is showed on field
     */
    isFieldErrorShowed(field?: string): boolean;
    /**
     * Using this method you can check if a specific field is invalid
     * @param {string} field - Field name
     * @param {string} validator - Validator name. Available validators: `required, cardNumberValidator, expireDateValidation`
     * @return {boolean} Field is invalid by validator
     */
    isInvalidFieldByValidator(field: string, validator: string): boolean;
    /**
     * Using this method you can hide widget after load
     * @param {boolean} [saveSize=false] - using this param you can save iframe's size
     */
    hide(saveSize: boolean): void;
    /**
     * Using this method you can show widget after using hide method
     *
     */
    show(): void;
    /**
     * Using this method you can reload widget
     *
     */
    reload(): void;
    /**
     * Using this method you can hide any elements inside widget
     *
     * @example
     * widget.hideElements(['submit_button', 'email']);
     *
     * @param {string[]} elements -  list of element which can be hidden [ELEMENT]{@link ELEMENT} || [FORM_FIELD]{@link FORM_FIELD}
     */
    hideElements(elements: string[]): void;
    /**
     * Using this method you can show any elements inside widget
     *
     * * @example
     * widget.showElements(['submit_button', 'email']);
     *
     * @param {string[]} elements -  list of element which can be showed [ELEMENT]{@link ELEMENT} || [FORM_FIELD]{@link FORM_FIELD}
     *
     */
    showElements(elements: string[]): void;
    /**
     * Method for update values for form fields inside the widget
     *
     * @example
     * widget.updateFormValues({
     *       email: 'predefined@email.com',
     *       card_name: 'Houston'
     *   });
     *
     * @param {IFormValues} fieldValues - Fields with values
     */
    updateFormValues(fieldValues: IFormValues): void;
    updateFormValue(key: string, value: string): void;
    /**
     * After finish event of widget, data (dataType) will be insert to input (selector)
     *
     * @param {string} selector - css selector . [] #
     * @param {string} dataType - data type of IEventData object.
     */
    onFinishInsert(selector: string, dataType: string): void;
    /**
     * Widget will intercept submit of your form for processing widget
     *
     * Process: click by submit button in your form --> submit widget ---> submit your form
     * @note  submit button in widget will be hidden.
     *
     * @param {string} selector - css selector of your form
     *
     * @example
     *  <form id="myForm">
     *      <input name="amount">
     *      <button type="submit">Submit</button>
     *  </form>
     * <!--
     * -->
     * <script>
     *     widget.interceptSubmitForm('#myForm');
     * </script>
     */
    interceptSubmitForm(selector: string): void;
    /**
     * This method hides a submit button and automatically execute form submit
     */
    useCheckoutAutoSubmit(): void;
    /**
     * Use this method for resize iFrame according content height
     *
     * @example
     * widget.useAutoResize();
     *
     */
    useAutoResize(): void;
}
