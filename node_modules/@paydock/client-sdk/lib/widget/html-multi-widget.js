import { MultiWidget } from "./multi-widget";
import { Container } from "../components/container";
import { IFrame } from "../components/iframe";
import { IFrameEvent, EVENT } from "../components/iframe-event";
import { Trigger, TRIGGER } from "../components/trigger";
import { Event as EventHelper } from "../helper/event";
import { FormInterceptor } from "../components/form-Interceptor";
import { ELEMENT, FORM_FIELD, STYLE, TEXT } from '../components/param';
import { ObjectHelper } from "../helper/object";
/**
 * Interface of data from validation event.
 * @interface IFormValidation
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {boolean} [form_valid] Form is valid
 * @param {array} [invalid_fields] Invalid form fields
 * @param {array} [invalid_showed_fields] List of fields on which the error is already displayed
 * @param {array} [validators] List of validators with fields
 * */
/**
 * Interface of data from event.
 * @interface IEventMetaData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {string} configuration_token Token received from our API with widget data
 * @param {string} type Payment type 'card', 'bank_account'
 * @param {string} gateway_type Gateway type
 * @param {string} [card_number_last4] Last 4 digit of your card
 * @param {string} [card_scheme] Card scheme
 * @param {number} [card_number_length] Card number length
 * @param {string} [account_name] Bank account account name
 * @param {string} [account_number] Bank account account number
 * */
/**
 * Interface of data from event.
 * @interface IEventAfterLoadData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * */
/**
 * Interface of data from event.
 * @interface IEventFinishData
 *
 * @param {string} event Event name
 * @param {string} purpose System variable. Purpose of event
 * @param {string} message_source System variable. Event source
 * @param {string} [ref_id] Custom value for identify result of processed operation
 * @param {string} payment_source One time token. Result from this endpoint [API docs](https://docs.paydock.com/#tokens)
 * */
/**
 * List of available event's name
 * @const EVENT
 *
 * @type {object}
 * @param {string} AFTER_LOAD=afterLoad
 * @param {string} SUBMIT=submit
 * @param {string} FINISH=finish
 * @param {string} VALIDATION=validation
 * @param {string} VALIDATION_ERROR=validationError
 * @param {string} SYSTEM_ERROR=systemError
 * @param {string} META_CHANGE=metaChange
 * @param {string} RESIZE=resize
 */
/**
 * List of available event's name
 * @const VAULT_DISPLAY_EVENT
 *
 * @type {object}
 * @param {string} AFTER_LOAD=afterLoad
 * @param {string} SYSTEM_ERROR=system_error
 * @param {string} CVV_SECURE_CODE_REQUESTED=cvv_secure_code_requested
 * @param {string} CARD_NUMBER_SECURE_CODE_REQUESTED=card_number_secure_code_requested
 * @param {string} ACCESS_FORBIDDEN=access_forbidden
 * @param {string} SESSION_EXPIRED=systemError
 * @param {string} SYSTEM_ERROR=session_expired
 * @param {string} OPERATION_FORBIDDEN=operation_forbidden
 */
/**
 * Class HtmlMultiWidget include method for working with html
 * @constructor
 * @extends MultiWidget
 *
 * @param {string} selector - Selector of html element. Container for widget
 * @param {string} publicKey - PayDock users public key
 * @param {(Configuration | string | Configuration[] | string[])} conf - exemplar[s] Configuration class OR configuration token
 * @example
 * var widget = new MultiWidget('#widget', 'publicKey','configurationToken'); // With a pre-created configuration token
 *
 * var widget = new MultiWidget('#widget', 'publicKey',['configurationToken', 'configurationToken2']); // With pre-created configuration tokens
 *
 * var widget = new MultiWidget('#widget', 'publicKey', new Configuration('gatewayId')); With Configuration
 *
 * var widget = new MultiWidget('#widget', 'publicKey',[ With Configurations
 *      Configuration() // default gateway_id,
 *      Configuration('gatewayId'),
 *      Configuration('gatewayId', 'bank_account')
 * ]);
 **/
export class HtmlMultiWidget extends MultiWidget {
    constructor(selector, publicKey, conf) {
        super(publicKey, conf);
        this.validationData = {};
        this.container = new Container(selector);
        this.iFrame = new IFrame(this.container);
        this.triggerElement = new Trigger(this.iFrame);
        this.event = new IFrameEvent(window);
    }
    /**
     * The final method to beginning, the load process of widget to html
     *
     */
    load() {
        this.setStyles(this.container.getStyles(ObjectHelper.values(STYLE)));
        this.setTexts(this.container.getAttr(ObjectHelper.values(TEXT)));
        this.loadIFrameUrl((url) => {
            this.iFrame.load(url, { title: 'Card details' });
            this.afterLoad();
        }, (errors) => {
            console.error('Errors when creating a token[s, widget will not be load:');
            for (let index in errors) {
                if (errors.hasOwnProperty(index))
                    console.error(`--- | ${errors[index]}`);
            }
        });
    }
    afterLoad() {
        this.on(EVENT.VALIDATION, (data) => {
            this.validationData = data;
        });
    }
    /**
     * Listen to events of widget
     *
     * @example
     *
     * widget.on('form_submit', function (data) {
     *      console.log(data);
     * });
     * // or
     *  widget.on('form_submit').then(function (data) {
     *      console.log(data);
     * });
     * @param {string} eventName - Available event names [EVENT]{@link EVENT}
     * @param {listener} [cb]
     * @return {Promise<IEventData | IEventMetaData | IEventFinishData | IFormValidation> | void}
     */
    on(eventName, cb) {
        if (typeof cb === "function")
            return this.event.on(eventName, this.link.getParams().widget_id, cb);
        return new Promise((resolve) => this.event.on(eventName, this.link.getParams().widget_id, (res) => resolve(res)));
    }
    /**
     * This callback will be called for every trigger
     *
     * @param {triggerName} triggers - submit_form, tab
     * @param {ITriggerData} data which will be sending to widget
     */
    trigger(triggerName, data = {}) {
        this.triggerElement.push(triggerName, data);
    }
    /**
     * Using this method you can get validation state information
     * @return {IFormValidation} Form validation object
     */
    getValidationState() {
        return this.validationData;
    }
    /**
     * Using this method you can check if the form is valid
     * @return {boolean} Form is valid
     */
    isValidForm() {
        return !!this.validationData.form_valid;
    }
    /**
     * Using this method you can check if a specific form field is invalid
     * @param {string} field - Field name
     * @return {boolean} Field is invalid
     */
    isInvalidField(field = '') {
        if (!this.validationData.invalid_fields)
            return false;
        return this.validationData.invalid_fields.indexOf(field) !== -1;
    }
    /**
     * Using this method you can check if an error is displayed on a specific field
     * @param {string} field - Field name
     * @return {boolean} Error is showed on field
     */
    isFieldErrorShowed(field = '') {
        if (!this.validationData.invalid_showed_fields)
            return false;
        return this.validationData.invalid_showed_fields.indexOf(field) !== -1;
    }
    /**
     * Using this method you can check if a specific field is invalid
     * @param {string} field - Field name
     * @param {string} validator - Validator name. Available validators: `required, cardNumberValidator, expireDateValidation`
     * @return {boolean} Field is invalid by validator
     */
    isInvalidFieldByValidator(field = '', validator) {
        if (this.validationData.validators && !this.validationData.validators[validator])
            return false;
        return this.validationData.validators[validator].indexOf(field) !== -1;
    }
    /**
     * Using this method you can hide widget after load
     * @param {boolean} [saveSize=false] - using this param you can save iframe's size
     */
    hide(saveSize) {
        this.iFrame.hide(saveSize);
    }
    /**
     * Using this method you can show widget after using hide method
     *
     */
    show() {
        this.iFrame.show();
    }
    /**
     * Using this method you can reload widget
     *
     */
    reload() {
        this.iFrame.remove();
        this.load();
    }
    /**
     * Using this method you can hide any elements inside widget
     *
     * @example
     * widget.hideElements(['submit_button', 'email']);
     *
     * @param {string[]} elements -  list of element which can be hidden [ELEMENT]{@link ELEMENT} || [FORM_FIELD]{@link FORM_FIELD}
     */
    hideElements(elements) {
        let filteredElements = [];
        let supportedElements = ObjectHelper.values(ELEMENT).concat(ObjectHelper.values(FORM_FIELD));
        for (let index in elements) {
            if (!elements.hasOwnProperty(index))
                continue;
            if (supportedElements.indexOf(elements[index]) !== -1)
                filteredElements.push(elements[index]);
            else
                console.warn(`Widget::hideElements: unsupported element ${elements[index]}`);
        }
        if (filteredElements.length)
            this.trigger(TRIGGER.HIDE_ELEMENTS, { elements: filteredElements.join(',') });
    }
    /**
     * Using this method you can show any elements inside widget
     *
     * * @example
     * widget.showElements(['submit_button', 'email']);
     *
     * @param {string[]} elements -  list of element which can be showed [ELEMENT]{@link ELEMENT} || [FORM_FIELD]{@link FORM_FIELD}
     *
     */
    showElements(elements) {
        let filteredElements = [];
        let supportedElements = ObjectHelper.values(ELEMENT).concat(ObjectHelper.values(FORM_FIELD));
        for (let index in elements) {
            if (!elements.hasOwnProperty(index))
                continue;
            if (supportedElements.indexOf(elements[index]) !== -1)
                filteredElements.push(elements[index]);
            else
                console.warn(`Widget::showElements: unsupported element ${elements[index]}`);
        }
        if (filteredElements.length)
            this.trigger(TRIGGER.SHOW_ELEMENTS, { elements: filteredElements.join(',') });
    }
    /**
     * Method for update values for form fields inside the widget
     *
     * @example
     * widget.updateFormValues({
     *       email: 'predefined@email.com',
     *       card_name: 'Houston'
     *   });
     *
     * @param {IFormValues} fieldValues - Fields with values
     */
    updateFormValues(fieldValues) {
        for (let key in fieldValues) {
            if (fieldValues.hasOwnProperty(key))
                this.updateFormValue(key, fieldValues[key]);
        }
    }
    updateFormValue(key, value) {
        if (ObjectHelper.values(FORM_FIELD).indexOf(key) === -1)
            return console.warn(`Widget::setFormValues[s: unsupported field ${key}`);
        if (/\,/.test(value) || /\:/.test(value))
            return console.warn(`Widget::setFormValues[s: ${key} - unsupported symbols (: or ,) in value`);
        this.trigger(TRIGGER.UPDATE_FORM_VALUES, { form_values: `${key}:${value}` });
    }
    /**
     * After finish event of widget, data (dataType) will be insert to input (selector)
     *
     * @param {string} selector - css selector . [] #
     * @param {string} dataType - data type of IEventData object.
     */
    onFinishInsert(selector, dataType) {
        this.on(EVENT.FINISH, (event) => {
            EventHelper.insertToInput(selector, dataType, event);
        });
    }
    /**
     * Widget will intercept submit of your form for processing widget
     *
     * Process: click by submit button in your form --> submit widget ---> submit your form
     * @note  submit button in widget will be hidden.
     *
     * @param {string} selector - css selector of your form
     *
     * @example
     *  <form id="myForm">
     *      <input name="amount">
     *      <button type="submit">Submit</button>
     *  </form>
     * <!--
     * -->
     * <script>
     *     widget.interceptSubmitForm('#myForm');
     * </script>
     */
    interceptSubmitForm(selector) {
        this.setHiddenElements([ELEMENT.SUBMIT_BUTTON]);
        let formInterceptor = new FormInterceptor(selector);
        formInterceptor.beforeSubmit(() => {
            this.triggerElement.push(TRIGGER.SUBMIT_FORM, {});
            this.event.on(EVENT.FINISH, this.link.getParams().widget_id, () => {
                formInterceptor.continueSubmit();
            });
        });
    }
    /**
     * This method hides a submit button and automatically execute form submit
     */
    useCheckoutAutoSubmit() {
        this.setHiddenElements([ELEMENT.SUBMIT_BUTTON]);
        this.on(EVENT.CHECKOUT_SUCCESS, (data) => {
            this.trigger(TRIGGER.SUBMIT_FORM);
        });
        this.on(EVENT.VALIDATION_ERROR, (data) => {
            this.trigger(TRIGGER.REFRESH_CHECKOUT);
        });
        this.on(EVENT.SYSTEM_ERROR, (data) => {
            this.trigger(TRIGGER.REFRESH_CHECKOUT);
        });
    }
    /**
     * Use this method for resize iFrame according content height
     *
     * @example
     * widget.useAutoResize();
     *
     */
    useAutoResize() {
        this.on(EVENT.RESIZE, (data) => {
            if (this.iFrame.getElement()) {
                this.iFrame.getElement().scrolling = 'no';
                if (data.height)
                    this.iFrame.setStyle('height', data.height + 'px');
            }
        });
    }
}
//# sourceMappingURL=../../src/lib/widget/html-multi-widget.js.map